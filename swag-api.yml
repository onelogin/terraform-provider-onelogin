swagger: '2.0'
info:
  contact:
    name: OneLogin
    url: 'https://support.onelogin.com'
  description: OpenAPI Specification for OneLogin
  title: OneLogin API
  version: 3.1.1
host: your-api-subdomain.onelogin.com
basePath: /api
schemes:
  - https
security:
  - apikey_auth: []

paths:
  /1/events:
    get:
      produces:
        - application/json
      parameters:
        - collectionFormat: multi
          in: query
          items:
            type: integer
          name: event_type_id
          type: array
        - in: query
          name: client_id
          type: integer
        - in: query
          name: directory_id
          type: integer
        - in: query
          name: id
          required: false
          type: integer
        - in: query
          name: created_at
          type: string
        - in: query
          name: resolution
          type: string
        - in: query
          name: since
          type: string
        - in: query
          name: until
          type: string
        - description: Set to the id of the user that you want to return.
          in: query
          name: user_id
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/event'
                type: array
              pagination:
                properties:
                  after_cursor:
                    example: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
                    type: string
                  before_cursor:
                    example: 'null'
                    type: string
                  next_link:
                    example: >-
                      https://your-api-subdomain.onelogin.com/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
                    type: string
                  previous_link:
                    example: 'null'
                    type: string
                type: object
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Events
      description: Get Events
      operationId: getEvents
      summary: Get Events
  /1/events/types:
    get:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  properties:
                    description:
                      example: App %app% removed from role %role%
                      type: string
                    id:
                      example: 2
                      type: integer
                    name:
                      example: APP_REMOVED_FROM_ROLE
                      type: string
                  type: object
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
      tags:
        - Events
      description: Get Event types
      operationId: getEventTypes
      summary: Get Event Types
  '/1/events/{event_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: event_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                $ref: '#/definitions/event'
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Events
      description: Get Event By ID
      operationId: getEventById
      summary: Get Event by ID
  /1/groups:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/group'
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Groups
      description: Get Groups
      operationId: getGroups
      summary: Get Groups
  '/1/groups/{group_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: group_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/group'
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Groups
      description: Get Group By ID
      operationId: getGroupById
      summary: Get Group by ID
  /1/invites/get_invite_link:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            properties:
              email:
                description: >-
                  Set to the user email address to generate an invite link. The
                  value is case sensitive.
                example: jennifer.hasenfus@mycompany.com
                type: string
            type: object
      responses:
        '200':
          description: Successful response
          examples:
            application/json:
              data:
                - >-
                  http://app.onelogin.com/password/reset?token=1111111cf892e56957e35c9c12f128483031dd11
              status:
                code: 200
                error: false
                message: success
                type: success
          schema:
            properties:
              data:
                description: Provides reset password link
                items:
                  type: string
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Invite Links
      description: Generate Invite Link
      operationId: getInviteLink
      summary: Generate Invite Link
  /1/invites/send_invite_link:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            properties:
              email:
                description: >-
                  Set to the user email address to generate an invite link. The
                  value is case sensitive.
                example: jennifer.hasenfus@mycompany.com
                type: string
              personal_email:
                description: >-
                  To send an invite email to a different address than the one
                  provided in email, provide it here. The invite link is sent to
                  this address instead.
                example: jennifer.hasenfus@mail.com
                type: string
            type: object
      responses:
        '200':
          description: Successful response
          examples:
            application/json:
              status:
                code: 200
                error: false
                message: Email sent successfully to jennifer.hasenfus@mail.com
                type: success
          schema:
            properties:
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Invite Links
      description: Send Invite Link
      operationId: sendInviteLink
      summary: Send  Invite Link
  /1/privileges:
    post:
      x-terraform-resource-name: "privileges"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/privilege'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/privilege'
        '400':
          description: Bad Request
          examples:
            application/json:
              message: >-
                The request could not be understood by the server due to
                malformed syntax: Statement required Action array
              name: BadRequestError
              statusCode: 400
          schema:
            $ref: '#/definitions/altErr'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Create privilege
      operationId: createPrivilege
      summary: Create a Privilege
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/privilege'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: List Privileges
      operationId: listPriveleges
      summary: List Privileges
  '/1/privileges/{privilege_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/privilege'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Get a Privilige
      operationId: getPrivilege
      summary: Get a Privilege
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Delete
      operationId: deletePrivilege
      summary: Delete a Privilege
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/privilege'
      responses:
        '200':
          description: Successful response
          examples:
            application/json:
              id: 5e43a548-e9c6-47be-9341-92160902f7a6
          schema:
            properties:
              id:
                description: Privilege ID
                type: string
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              message: >-
                The request could not be understood by the server due to
                malformed syntax: Statement required Action array
              name: BadRequestError
              statusCode: 400
          schema:
            $ref: '#/definitions/altErr'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Update privilege
      operationId: updatePrivilege
      summary: Update a Privilege
  '/1/privileges/{privilege_id}/roles':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              afterCursor:
                type: integer
                x-nullable: true
              beforeCursor:
                type: integer
                x-nullable: true
              nextLink:
                type: string
                x-nullable: true
              previousLink:
                type: string
                x-nullable: true
              roles:
                items:
                  type: integer
                type: array
              total:
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: List roles for privilege
      operationId: listPrivelegeRoles
      summary: Get Roles assigned to Privilege
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            example:
              roles:
                - 123
                - 456
                - 789
            properties:
              roles:
                items:
                  type: integer
                type: array
            type: object
      responses:
        '201':
          description: Created
          schema:
            properties:
              success:
                example: true
                type: boolean
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              message: >-
                The request could not be understood by the server due to
                malformed syntax: Statement required Action array
              name: BadRequestError
              statusCode: 400
          schema:
            $ref: '#/definitions/altErr'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: 'Add roles to privilege '
      operationId: addPrivilegeToRole
      summary: Assign a Privilege to Roles
  '/1/privileges/{privilege_id}/roles/{role_id}':
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Add roles to privilege
      operationId: deleteRoleFromPrivilege
      summary: Remove a Privilege from a Role
  '/1/privileges/{privilege_id}/users':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              afterCursor:
                type: integer
                x-nullable: true
              beforeCursor:
                type: integer
                x-nullable: true
              nextLink:
                type: string
                x-nullable: true
              previousLink:
                type: string
                x-nullable: true
              total:
                type: integer
              users:
                items:
                  type: integer
                type: array
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Get Assigned Users
      operationId: getAssignedUser
      summary: Get Users assigned to a Privilege
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              users:
                items:
                  type: integer
                type: array
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              success:
                example: true
                type: boolean
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              message: >-
                The request could not be understood by the server due to
                malformed syntax: Statement required Action array
              name: BadRequestError
              statusCode: 400
          schema:
            $ref: '#/definitions/altErr'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Assign Users to Privilege
      operationId: assignUsersToPrivilege
      summary: Assign Users to a Privilege
  '/1/privileges/{privilege_id}/users/{user_id}':
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: privilege_id
          required: true
          type: string
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Privileges
      description: Remove a Privilege from Users
      operationId: removeUserFromPrivilege
      summary: Remove a Privilege from Users
  /1/roles:
    get:
      produces:
        - application/json
      parameters:
        - in: query
          name: name
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                example:
                  - id: 1111
                    name: C-Executive
                  - id: 1112
                    name: Contractor
                  - id: 1113
                    name: Default
                  - id: 1114
                    name: Employee
                items:
                  properties:
                    id:
                      description: Role ID
                      type: integer
                    name:
                      description: Role Name
                      type: string
                  type: object
                type: array
              pagination:
                properties:
                  after_cursor:
                    example: xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
                    type: string
                  before_cursor:
                    example: '""'
                    type: string
                  next_link:
                    example: >-
                      https://your-api-subdomain.onelogin.com/1/events?after_cursor=xWNjb3VudF9pZDo6OjUzNDEzLS0jI2lkOjo6OTA0MjU3NTQ2
                    type: string
                  previous_link:
                    example: '""'
                    type: string
                type: object
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Roles
      description: Get Role by Name
      operationId: getRoleByName
      summary: Get Role by Name
  '/1/roles/{role_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  properties:
                    id:
                      description: role's unique ID in Onelogin
                      example: 123456
                      type: integer
                    name:
                      description: Role name
                      example: Employee
                      type: string
                  type: object
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Roles
      description: Get Role By ID
      operationId: getRoleById
      summary: Get Role by ID
  /1/saml_assertion:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/saml_assert'
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  type: object
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - SAML Assertions
      description: Generate SAML Assertion
      operationId: generateSamlAssert
      summary: Generate SAML Assertion
  /1/saml_assertion/verify_factor:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/saml_factor'
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                description: Provides the SAML assertion.
                example: >-
                  PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSZjE5Y2EyMTI0ZGMxNzJmNzhmMjI3OTk3YzMwOTBkODVkNzFjYWMzOCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjAtM
                type: string
              message:
                description: Plain text description describing the outcome of the response.
                example: SMS token sent to your mobile device. Authentication pending
                type: string
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - SAML Assertions
      description: 'Verify Factor: SAML'
      operationId: verFactorSaml
      summary: Verify Factor SAML
  /1/users:
    get:
      produces:
        - application/json
      parameters:
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users created after a
            given date & time.
          in: query
          name: created_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users created before a
            given date & time.
          in: query
          name: created_until
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users updated after a
            given date & time.
          in: query
          name: updated_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users updated before a
            given date & time.
          in: query
          name: updated_until
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users that logged in
            after a given date & time.
          in: query
          name: last_login_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users that logged in
            before a given date & time.
          in: query
          name: last_login_until
          type: string
        - description: The first name of the user
          in: query
          name: firstname
          type: string
        - description: The last name of the user
          in: query
          name: lastname
          type: string
        - description: The email address of the user
          in: query
          name: email
          type: string
        - description: The username for the user
          in: query
          name: username
          type: string
        - description: The AD login name for the user
          in: query
          name: samaccountname
          type: string
        - in: query
          name: directory_id
          type: integer
        - description: An external identifier that has been set on the user
          in: query
          name: external_id
          type: string
        - description: A comma separated list of OneLogin User IDs
          in: query
          name: user_ids
          type: string
        - description: >-
            The short name of a custom attribute. Note that the attribute name
            is prefixed with custom_attributes.
          in: query
          name: 'custom_attributes.{attribute_name}'
          type: string
        - description: Optional. Comma delimited list of fields to return.
          enum:
            - apps
            - users
            - admins
          in: query
          name: fields
          type: string
      responses:
        '200':
          description: OK
          headers:
            After-Cursor:
              description: >-
                A string that can be used to request the page of results that
                follows the current page using the same set of search filters
                and pagination options.
              type: string
            Before-Cursor:
              description: >-
                A string that can be used to request the page of results that
                preceed the current page using the same set of search filters
                and pagination options.
              type: string
            Current-Page:
              description: The index number of the current page being returned.
              type: integer
            Link:
              description: 'A set of urls which contains premade links for first, next'
              type: array
            Page-Items:
              description: The number of items returned in the response.
              type: integer
            Total-Count:
              description: The total number of items across all pages.
              type: integer
            Total-Pages:
              description: The total number of pages to return all results.
              type: integer
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: List Users
      operationId: listUsers
      summary: List Users
    post:
      x-terraform-resource-name: "users_v1"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: >-
            Controls how mappings will be applied to the user on creation.
            Defaults to async.
          enum:
            - async
            - sync
            - disabled
          in: query
          name: mappings
          type: string
        - description: Will passwords validate against the User Policy? Defaults to true.
          in: query
          name: validate_policy
          type: boolean
        - in: body
          name: body
          schema:
            $ref: '#/definitions/user'
      responses:
        '201':
          description: The full user resource is returned
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Create a User
      operationId: createUser
      summary: Create a User
  /1/users/custom_attributes:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                description: >-
                  Provides a list of custom attribute fields (also known as
                  custom user fields) that are available for your account.

                  The values returned correspond to the values you provided in
                  the Shortname field when you defined the custom user field.

                  For details about defining custom user fields, see Custom User
                  Fields.
                example:
                  - - alias
                    - branch
                items:
                  items:
                    type: string
                  type: array
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Get Custom Attributes
      operationId: getCustomAttributes
      summary: Get Custom Attributes
  '/1/users/set_password_clear_text/{user_id}':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              password:
                description: >-
                  Set to the password value using cleartext.

                  Hashes are never stored as cleartext. They are stored securely
                  using cryptographic hash. OneLogin continuously upgrades the
                  strength of the hash. Ensure that the value meets the password
                  strength requirements set for the account.
                example: <password>
                type: string
              password_confirmation:
                description: Ensure that this value matches the password value exactly.
                example: <password_confirmation>
                type: string
              validate_policy:
                default: false
                description: >-
                  Will passwords validate against the User Policy. Defaults to
                  false.
                example: false
                type: boolean
            required:
              - password
              - password_confirmation
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: >-
        Update User password using their ID. This is done in cleartext and is
        insecure.
      operationId: updatePasswordInsecure
      summary: Set Password Using ID in Cleartext
  '/1/users/set_password_using_salt/{user_id}':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              password:
                description: >-
                  Set to the password value using a SHA-256-encoded value. If
                  you are including your own password_salt value in your
                  request, prepend the salt value to the cleartext password
                  value before SHA-256-encoding it.

                  For example, if your salt value is hello and your cleartext
                  password value is password, the value you need to
                  SHA-256-encode is hellopassword. The resulting encoded value
                  would be
                  b1c788abac15390de987ad17b65ac73c9b475d428a51f245c645a442fddd078b.

                  Note that the alpha characters in this has must all be lower
                  case.
                example: xxxxx637aead4030a653f29dae62f1542d67484342c00627a65066e05c5f0
                type: string
              password_algorithm:
                description: Set to salt+sha256.
                example: salt+sha256
                type: string
              password_confirmation:
                description: This value must match the password value.
                example: xxxxx637aead4030a653f29dae62f1542d67484342c00627a65066e05c5f0
                type: string
              password_salt:
                description: >-
                  Optional. If your password hash has been salted then you can
                  provide the salt used in this param.

                  This assumes that the salt was prepended to the password
                  before doing the SHA256 hash.

                  The API supports a salt value that is up to 40 characters
                  long.
                example: 11xxxx1
                type: string
            required:
              - password
              - password_confirmation
              - password_algorithm
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Update User Password Using ID and SHA-256 with salt.
      operationId: updatePasswordSecure
      summary: Set Password Using ID and SHA-256 and Salt
  '/1/users/{user_id}':
    delete:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '204':
          description: 'On success, no content is returned in the response body.'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Delete A User
      operationId: deleteUser
      summary: Delete a User
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Get User By ID
      operationId: getUserById
      summary: Get User by ID
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: >-
            Controls how mappings will be applied to the user on creation.
            Defaults to async.
          enum:
            - async
            - sync
            - disabled
          in: query
          name: mappings
          type: string
        - description: Will passwords validate against the User Policy? Defaults to true.
          in: query
          name: validate_policy
          type: boolean
        - in: body
          name: body
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: The full user resource is returned
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Update a User
      operationId: updateUser
      summary: Update a User
  '/1/users/{user_id}/add_roles':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              role_id_array:
                description: >-
                  Set to an array of one or more role IDs. The IDs must be
                  positive integers.
                items:
                  type: integer
                type: array
            required:
              - role_id_array
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Add Roles for a User
      operationId: addRolesToUser
      summary: Add Roles for a User
  '/1/users/{user_id}/apps':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - default: false
          description: >-
            Defaults to `false`. When `true` will show all apps that are
            assigned to a user regardless of their portal visibility setting.
          in: query
          name: ignore_visibility
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            items:
              properties:
                extension:
                  description: >-
                    Boolean that indicates if the OneLogin browser extension is
                    required to launch this app.
                  type: boolean
                icon_url:
                  description: >-
                    A url for the icon that represents the app in the OneLogin
                    portal
                  type: string
                id:
                  description: The App ID
                  type: integer
                login_id:
                  description: Unqiue identifier for this user and app combination.
                  type: integer
                name:
                  description: The name of the app.
                  type: string
                provisioning_enabled:
                  description: Indicates if provisioning is enabled for this app.
                  type: boolean
                provisioning_state:
                  description: >-
                    If provisioning is enabled this indicates the state of
                    provisioning for the given user.
                  enum:
                    - unknown
                    - provisioning
                    - modifying
                    - deleting
                    - provisioning_pending_approval
                    - deleting_pending_approval
                    - modifying_pending_approval
                    - linking
                    - provisioned
                    - deleted
                    - modifying_failed
                    - provisioning_failed
                    - deleting_failed
                    - linking_failed
                    - disabled
                    - nonexistent
                    - modifying_pending_approval_then_disabled
                  type: string
                provisioning_status:
                  enum:
                    - enabling
                    - disabling
                    - enabling_pending_approval
                    - disabling_pendding_approval
                    - enabled
                    - disabled
                    - disabling_failed
                    - enabling_failed
                  type: string
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Get Apps for User
      operationId: getUserApps
      summary: Get Apps for a User
  '/1/users/{user_id}/auth_factor':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                properties:
                  auth_factors:
                    items:
                      properties:
                        factor_id:
                          description: >-
                            Identifier for the factor which will be used for
                            user enrollment
                          example: 16282
                          type: integer
                        name:
                          description: >-
                            Official authentication factor name, as it appears
                            to administrators in OneLogin.
                          example: Onelogin SMS
                          type: string
                    type: array
                type: object
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: Get MFA Factors
      operationId: getMFAFactors
      summary: Get Available Factors
  '/1/users/{user_id}/lock_user':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              locked_until:
                description: >-
                  Set to the number of minutes for which you want to lock the
                  user account.

                  Set to 0 if you want to lock the user account based on the
                  Lock effective period set in the policy assigned to the user.

                  If no policy is assigned to the user, setting this value to 0
                  will lock the user’s account until you unlock it

                  Note that this value can not be less time that the Lock
                  Effective Period specified on a user policy.
                example: 15
                type: integer
            required:
              - locked_until
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Lock User Account
      operationId: lockAccountUser
      summary: Lock User Account
  '/1/users/{user_id}/logout':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Log Out User
      operationId: logOutUser
      summary: Log User Out
  '/1/users/{user_id}/mfa_token':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              expires_in:
                description: >-
                  Set the duration of the token in seconds.

                  Token expiration defaults to 259200 seconds = 72 hours. 72
                  hours is the max value.
                example: 300
                type: integer
              reusable:
                default: false
                description: >-
                  Defines if the token is reusable multiple times within the
                  expiry window.

                  Value defaults to false. If set to true, token can be used
                  multiple times, until it expires.
                example: false
                type: boolean
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              expires_at:
                description: >-
                  Defines the expiration time and date for the token. Format is
                  UTC time.
                example: '2019-01-16T22:16:38.000Z'
                type: string
              mfa_token:
                description: >-
                  Token can function as a temporary MFA token. It can be used to
                  authenticate for any app when valid.
                example: '55647655'
                type: string
              resuable:
                description: >-
                  true indcates the token can be used multiple times, until it
                  expires. false indicates the token is invalid after a single
                  use or once it expires. Defaults to false.
                example: true
                type: boolean
            type: object
      tags:
        - Multi Factor Authentication V1
      description: Generate MFA Token
      operationId: generateMFAtoken
      summary: Generate Temp MFA Token
  '/1/users/{user_id}/otp_devices':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                properties:
                  otp_devices:
                    items:
                      properties:
                        active:
                          description: >-
                            True = enabled (used successfully for authentication
                            at least once). False = pending (registered but
                            never used).
                          example: true
                          type: boolean
                        auth_factor_name:
                          description: >-
                            "Official" authentication factor name, as it appears
                            to administrators in OneLogin.
                          example: Onelogin SMS
                          type: string
                        default:
                          description: True = is user’s default MFA device for OneLogin.
                          example: false
                          type: boolean
                        id:
                          description: MFA device identifier.
                          example: 525509
                          type: integer
                        needs_trigger:
                          description: >-
                            true: You MUST Activate this Factor to trigger an
                            SMS or Push notification before Verifying the OTP
                            code. false: No Activation required. You can Verify
                            the OTP immediately.

                            MFA factors that provide both push notifications
                            (user accepts notification) and pull code submission
                            (user initiates code submission from device or
                            enters it manually) should appear twice; once with
                            needs_trigger: true and once with needs_trigger:
                            false.
                          example: true
                          type: boolean
                        phone_number:
                          description: >-
                            For OTP codes sent via SMS, the phone number
                            receiving the SMS message.
                          example: +1xxxxxxxxxx
                          type: string
                        state_token:
                          description: >-
                            A short lived token that is required to Verify the
                            Factor. This token expires in 120 seconds.
                          example: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
                          type: string
                        type_display_name:
                          description: >-
                            Authentication factor display name as it appears to
                            users upon initial registration, as defined by
                            admins at Settings > Authentication Factors.
                          example: Onelogin SMS
                          type: string
                        user_display_name:
                          description: >-
                            Authentication factor display name assigned by users
                            when they enroll the device.
                          example: Rich's Phone
                          type: string
                    type: array
                type: object
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: Get Enrolled Factors
      operationId: getEnrolledFactors
      summary: Get Enrolled Factors
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              display_name:
                description: A name for the users device
                example: Rich's Phone
                type: string
              factor_id:
                description: The identifier of the factor to enroll the user with.
                example: 16282
                type: integer
              number:
                description: The phone number of the user in E.164 format.
                example: +1xxxxxxxxxx
                type: string
              verified:
                description: >-
                  Defaults to false. Some factors like SMS or Voice require that
                  a user recieve a token and then that token is supplied to the
                  Verify endpoint before the device is considered active.

                  You can set verfied to `true` which indicates the the users
                  phone number is pre verified and the device can be immediately
                  activated.           
                type: boolean
            required:
              - factor_id
              - display_name
              - number
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  properties:
                    active:
                      description: >-
                        True = enabled (used successfully for authentication at
                        least once). False = pending (registered but never
                        used).
                      example: true
                      type: boolean
                    auth_factor_name:
                      description: >-
                        "Official" authentication factor name, as it appears to
                        administrators in OneLogin.
                      example: Onelogin SMS
                      type: string
                    default:
                      description: True = is user’s default MFA device for OneLogin.
                      example: false
                      type: boolean
                    id:
                      description: MFA device identifier.
                      example: 525509
                      type: integer
                    needs_trigger:
                      description: >-
                        true: You MUST Activate this Factor to trigger an SMS or
                        Push notification before Verifying the OTP code. false:
                        No Activation required. You can Verify the OTP
                        immediately.

                        MFA factors that provide both push notifications (user
                        accepts notification) and pull code submission (user
                        initiates code submission from device or enters it
                        manually) should appear twice; once with needs_trigger:
                        true and once with needs_trigger: false.
                      example: true
                      type: boolean
                    phone_number:
                      description: >-
                        For OTP codes sent via SMS, the phone number receiving
                        the SMS message.
                      example: +1xxxxxxxxxx
                      type: string
                    state_token:
                      description: >-
                        A short lived token that is required to Verify the
                        Factor. This token expires in 120 seconds.
                      example: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
                      type: string
                    type_display_name:
                      description: >-
                        Authentication factor display name as it appears to
                        users upon initial registration, as defined by admins at
                        Settings > Authentication Factors.
                      example: Onelogin SMS
                      type: string
                    user_display_name:
                      description: >-
                        Authentication factor display name assigned by users
                        when they enroll the device.
                      example: Rich's Phone
                      type: string
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: ' Enroll an Authentication Factor'
      operationId: enrollMfaFactor
      summary: Enroll a Factor
  '/1/users/{user_id}/otp_devices/{device_id}':
    delete:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: path
          name: device_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: Remove an enrolled MFA device for a user
      operationId: removeMfaFactors
      summary: Remove an Enrolled Factor
  '/1/users/{user_id}/otp_devices/{device_id}/trigger':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: path
          name: device_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              numeric_sms_otp:
                description: >-
                  Optional. Defaults to false. Only applies to SMS factor.

                  When set to `true` a 6 digit numeric code will be sent to the
                  user instead of the standard code which is alphanumeric.
                example: true
                type: boolean
              sms_message:
                description: >-
                  Optional. Only applies to SMS factor.

                  A message template that will be sent via SMS. Max length of
                  the message after template items are inserted is 160
                  characters.

                  The following template variables can be included in the
                  message.

                  - {{otp_code}} - The security code. - {{expiration}} - The
                  number of minutes until the one time code expires.
                example: >-
                  This is a security code from ABC Co {{otp_code}}. It expires
                  in {{expiration}} minutes.
                type: string
              state_token_expires_in:
                description: >-
                  Optional. Sets the window of time in seconds that the factor
                  must be verified within.

                  Defaults to 120 seconds (2 minutes). Max 900 seconds (15
                  minutes).
                example: 300
                type: integer
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                properties:
                  otp_devices:
                    items:
                      properties:
                        active:
                          description: >-
                            True = enabled (used successfully for authentication
                            at least once). False = pending (registered but
                            never used).
                          example: true
                          type: boolean
                        auth_factor_name:
                          description: >-
                            "Official" authentication factor name, as it appears
                            to administrators in OneLogin.
                          example: Onelogin SMS
                          type: string
                        default:
                          description: True = is user’s default MFA device for OneLogin.
                          example: false
                          type: boolean
                        id:
                          description: MFA device identifier.
                          example: 525509
                          type: integer
                        needs_trigger:
                          description: >-
                            true: You MUST Activate this Factor to trigger an
                            SMS or Push notification before Verifying the OTP
                            code. false: No Activation required. You can Verify
                            the OTP immediately.

                            MFA factors that provide both push notifications
                            (user accepts notification) and pull code submission
                            (user initiates code submission from device or
                            enters it manually) should appear twice; once with
                            needs_trigger: true and once with needs_trigger:
                            false.
                          example: true
                          type: boolean
                        phone_number:
                          description: >-
                            For OTP codes sent via SMS, the phone number
                            receiving the SMS message.
                          example: +1xxxxxxxxxx
                          type: string
                        state_token:
                          description: >-
                            A short lived token that is required to Verify the
                            Factor. This token expires in 120 seconds.
                          example: f2402de2b446abd86ea5aa1f79b3fa72b4befacd
                          type: string
                        type_display_name:
                          description: >-
                            Authentication factor display name as it appears to
                            users upon initial registration, as defined by
                            admins at Settings > Authentication Factors.
                          example: Onelogin SMS
                          type: string
                        user_display_name:
                          description: >-
                            Authentication factor display name assigned by users
                            when they enroll the device.
                          example: Rich's Phone
                          type: string
                    type: array
                type: object
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: Activate a Factor
      operationId: activateMfaFactors
      summary: Activate a Factor
  '/1/users/{user_id}/otp_devices/{device_id}/verify':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: path
          name: device_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              otp_token:
                description: >-
                  OTP code provided by the device or SMS message sent to user.

                  When a device like OneLogin Protect that supports Push has
                  been used you do not need to provide the otp_token and can
                  keep polling this endpoint until the state_token expires.
                example: B41832
                type: string
              state_token:
                description: >-
                  The state_token is returned after a successful request to
                  Enroll a Factor or Activate a Factor. The state_token MUST be
                  provided if the needs_trigger attribute from the proceeding
                  calls is set to true.

                  Note that the state_token expires 120 seconds after creation.
                  If the token is expired you will need to Activate the Factor
                  again.
                example: 98e008497066bc2763c52342996e06358aab2e32
                type: string
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Multi Factor Authentication V1
      description: Verify a Factor
      operationId: verifyMfaFactor
      summary: Verify a Factor
  '/1/users/{user_id}/remove_roles':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              role_id_array:
                items:
                  properties:
                    role_id:
                      type: integer
                type: array
            required:
              - role_id_array
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Remove Roles for a User
      operationId: removeUserRole
      summary: Remove Roles for a User
  '/1/users/{user_id}/roles':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                description: List of Role IDs that are assigned to the User
                items:
                  type: integer
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Get User Roles
      operationId: getUserRoles
      summary: Get Roles for a User
  '/1/users/{user_id}/set_state':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              state:
                description: |-
                  Set to the state value. Valid values include:
                    - 0 : Unapproved
                    - 1 : Approved
                    - 2 : Rejected
                    - 3 : Unlicensed
                enum:
                  - 0
                  - 1
                  - 2
                  - 3
                example: 1
                type: integer
            required:
              - state
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
          examples:
            application/json:
              code: 403
              error: true
              message: not allowed
              type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V1
      description: Set User State
      operationId: setUserState
      summary: Set User State
  /2/api_authorizations:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/auth_server'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - API Authorization Server
      description: List Authorization Servers
      operationId: listAuthServers
      summary: List Api Auth Servers
    post:
      x-terraform-resource-name: "auth_servers"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_server'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_server'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - API Authorization Server
      description: Create Auth Server
      operationId: createAuthServer
      summary: Create Api Auth Server
  '/2/api_authorizations/{api_auth_id}':
    delete:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
      responses:
        '204':
          description: Success. The auth server is deleted. No content is returned.
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - API Authorization Server
      description: Delete Authentication Server
      operationId: deleteAuthServer
      summary: Delete Api Auth Server
    get:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_server'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - API Authorization Server
      description: Get Authorization Server
      operationId: getAuthServer
      summary: Get Api Auth Server
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_server'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_server'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - API Authorization Server
      description: Update Authorization Server
      operationId: updateAuthServer
      summary: Update Api Auth Server
  '/2/api_authorizations/{api_auth_id}/claims':
    get:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/token_claim'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Claims'
      description: Get Authorization claims
      operationId: getAuthclaims
      summary: Get Api Auth Server claims
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_claim'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/id'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Claims'
      description: Create Authorization Claim
      operationId: createAuthClaim
      summary: Create Api Auth Server Claim
  '/2/api_authorizations/{api_auth_id}/claims/{claim_id}':
    delete:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: claim_id
          required: true
          type: integer
      responses:
        '204':
          description: Success. The claim is deleted. No content is returned.
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Claims'
      description: Delete Authorization Claim
      operationId: deleteAuthClaim
      summary: Delete Api Auth Server Claim
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: claim_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_claim'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_id'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Claims'
      description: Update Authorization Server Claim
      operationId: updateClaim
      summary: Update Api Auth Server Claim
  '/2/api_authorizations/{api_auth_id}/clients':
    get:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/client_app_full'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Client Apps'
      description: List Client Apps
      operationId: listClientApps
      summary: List Clients Apps
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              app_id:
                description: The ID of the OpenId Connect app to allow access through.
                example: 1026152
                type: integer
              scopes:
                description: >-
                  An array of Scope IDs that represent scopes the app can
                  request
                example:
                  - 31
                  - 24
                items:
                  type: integer
                type: array
            type: object
      responses:
        '201':
          description: Created
          schema:
            properties:
              api_auth_id:
                example: 1022697
                type: integer
              app_id:
                example: 909021
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Client Apps'
      description: Add Client App
      operationId: addClientApp
      summary: Add Client App
  '/2/api_authorizations/{api_auth_id}/clients/{client_app_id}':
    delete:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: client_app_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              api_auth_id:
                example: 1022697
                type: integer
              app_id:
                example: 909021
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Client Apps'
      description: Delete Client App
      operationId: deleteClientApp
      summary: Remove Client App
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: client_app_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              scopes:
                description: An array of Scope IDs the scopes the app can request
                example:
                  - 123
                  - 456
                items:
                  type: integer
                type: array
            type: object
      responses:
        '200':
          description: Successful Response
          schema:
            properties:
              api_auth_id:
                example: 1022697
                type: integer
              app_id:
                example: 909021
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Client Apps'
      description: Update Client App
      operationId: updateClientApp
      summary: Update Client App
  '/2/api_authorizations/{api_auth_id}/scopes':
    get:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/auth_scope'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Scopes'
      description: List Authorization Scopes
      operationId: getScopes
      summary: Get Api Auth Server Scopes
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_scope'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_scope'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Scopes'
      description: Create API Auth Server Scope
      operationId: createScope
      summary: Create Api Auth Server Scope
  '/2/api_authorizations/{api_auth_id}/scopes/{scope_id}':
    delete:
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: scope_id
          required: true
          type: integer
      responses:
        '204':
          description: Success. The scope is deleted. No content is returned.
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Scopes'
      description: Delete Scope
      operationId: deleteScope
      summary: Delete Api Auth Server Scope
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: path
          name: api_auth_id
          required: true
          type: string
        - in: path
          name: scope_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: '#/definitions/auth_scope'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/auth_id'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - 'API Auth: Scopes'
      description: Update Scope
      operationId: updateScope
      summary: Update Api Auth Server Scope
  /2/apps:
    post:
      x-terraform-resource-name: "apps"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/generic-app'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/generic-app'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Apps
      description: Create App
      operationId: createApp
      summary: Create App
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/generic-app'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: List Apps
      operationId: listApps
      summary: List Apps
  '/2/apps/{app_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/generic-app'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: Get App
      operationId: getApp
      summary: Get App
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: Delete App
      operationId: deleteApp
      summary: Delete App
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: '#/definitions/generic-app'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/generic-app'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: Update App
      operationId: updateApp
      summary: Update App
  '/2/apps/{app_id}/rules':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: '#/definitions/app_rule'
      responses:
        '201':
          description: CREATED
          schema:
            $ref: '#/definitions/app_rule'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Create App Rule
      operationId: createAppRule
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - description: >-
            Filters Rules based on their Conditions. Values formatted as :,
            where name is the Condition to look for, and value is the value to
            find. Multiple filters can be declared by using a comma delimited
            list. Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_condition=has_role:123456

            Multiple filters. has_condition=has_role:123456,status:1

            Wildcard for conditions. has_condition=*:123456

            Wildcard for condition values. has_condition=has_role:*
          in: query
          name: has_condition
          required: false
          type: string
          x-example: 'has_condition=has_role:123456'
        - description: >-
            Filters Rules based on their Conditions. Values formatted as :,
            where name is the Condition to look for, and value is the value to
            find. Multiple filters can be declared by using a comma delimited
            list. Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_condition=has_role:123456

            Multiple filters. has_condition=has_role:123456,status:1

            Wildcard for conditions. has_condition=*:123456

            Wildcard for condition values. has_condition=has_role:*
          enum:
            - builtin
            - custom
            - none
          in: query
          name: has_condition_type
          required: false
          type: string
        - description: >-
            Filters Rules based on their Actions. Values formatted as :, where
            name is the Action to look for, and value is the value to find.
            Multiple filters can be declared by using a comma delimited list.
            Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_action=set_licenses:123456

            Multiple filters. has_action=set_groups:123456,set_usertype:*

            Wildcard for actions. has_action=*:123456

            Wildcard for action values. has_action=set_userprincipalname:*
          in: query
          name: has_action
          type: string
          x-example: 'has_action=set_groups:123456,set_usertype:*'
        - description: >-
            Filters Rules based on their action types.

            Allowed values are:

            builtin - actions that involve standard attributes custom - actions
            that involve custom attributes none - no actions are defined For
            example:

            Find Rules with no actions has_action_type=none
          enum:
            - builtin
            - custom
            - none
          in: query
          name: has_action_type
          type: string
        - default: true
          description: >-
            Defaults to true. When set to `false` will return all disabled
            mappings.
          in: query
          name: enabled
          type: boolean
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/app_rule'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: List App Rules
      operationId: listAppRules
      summary: List Rules
  '/2/apps/{app_id}/rules/{rule_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/app_rule'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Get App Rule
      operationId: getAppRule
      summary: Get Rule
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_id
          required: true
          type: string
      responses:
        '204':
          description: Success. The rule is deleted. No content is returned.
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Delete App Rule
      operationId: deleteRule
      summary: Delete Rule
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/app_rule'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/app_rule'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Update App Rule.
      operationId: updateAppRule
      summary: Update Rule
  '/2/apps/{app_id}/rules/actions':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/rule_action'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: List Actions
      operationId: listActions
      summary: List Actions
  '/2/apps/{app_id}/rules/actions/{rule_action_value}/values':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_action_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/rule_action'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Sort App rules
      operationId: listActionValies
      summary: List Actions Values
  '/2/apps/{app_id}/rules/conditions':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            items:
              properties:
                name:
                  description: Name of the rule condition
                  example: MemberOf
                  type: string
                value:
                  description: >-
                    The unique identifier of the condition. This should be used
                    when defining conditions for a rule.
                  example: member_of
                  type: string
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: List App Conditions
      operationId: listConditions
      summary: List Conditions
  '/2/apps/{app_id}/rules/conditions/{rule_condition_value}/operators':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_condition_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/rule_condition'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: List Condition Operators
      operationId: listConditionOperators
      summary: List Conditions Operators
  '/2/apps/{app_id}/rules/conditions/{rule_condition_value}/values':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: rule_condition_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/rule_condition'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: List Condition Values
      operationId: listConditionValues
      summary: List Conditions Values
  '/2/apps/{app_id}/rules/sort':
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            example:
              - 196671
              - 196670
              - 196672
              - 196676
              - 197758
            items:
              type: integer
            type: array
      responses:
        '200':
          description: Successful response
          schema:
            example:
              - 196671
              - 196670
              - 196672
              - 196676
              - 197758
            items:
              type: integer
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - App Rules
      description: Sort App rules
      operationId: sortAppRules
      summary: Bulk Sort
  '/2/apps/{app_id}/parameters/{parameter_id}':
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
        - in: path
          name: parameter_id
          required: true
          type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '403':
          description: Forbidden
          examples:
            application/json:
              message: Not allowed to destroy specified resource
              name: ForbiddenError
              statusCode: 403
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: Delete Parameter from App
      operationId: deleteAppParameter
      summary: Delete Parameter from App

  '/2/apps/{app_id}/users':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: app_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: Get App Users
      operationId: getAppUsers
      summary: Get App Users
  /2/connectors:
    get:
      produces:
        - application/json
      parameters:
        - in: query
          name: name
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/connector'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Apps
      description: List Connectors
      operationId: listConnectors
      summary: List Connectors
  /2/mappings:
    post:
      x-terraform-resource-name: "mappings"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/mapping'
      responses:
        '201':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/mapping'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: Create Mapping
      operationId: createMapping
      summary: Create Mapping
    get:
      produces:
        - application/json
      parameters:
        - default: true
          description: >-
            Defaults to true. When set to `false` will return all disabled
            mappings.
          in: query
          name: enabled
          type: boolean
        - description: >-
            Filters Rules based on their Conditions. Values formatted as :,
            where name is the Condition to look for, and value is the value to
            find. Multiple filters can be declared by using a comma delimited
            list. Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_condition=has_role:123456

            Multiple filters. has_condition=has_role:123456,status:1

            Wildcard for conditions. has_condition=*:123456

            Wildcard for condition values. has_condition=has_role:*
          in: query
          name: has_condition
          required: false
          type: string
          x-example: 'has_condition=has_role:123456'
        - description: >-
            Filters Rules based on their Conditions. Values formatted as :,
            where name is the Condition to look for, and value is the value to
            find. Multiple filters can be declared by using a comma delimited
            list. Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_condition=has_role:123456

            Multiple filters. has_condition=has_role:123456,status:1

            Wildcard for conditions. has_condition=*:123456

            Wildcard for condition values. has_condition=has_role:*
          enum:
            - builtin
            - custom
            - none
          in: query
          name: has_condition_type
          required: false
          type: string
        - description: >-
            Filters Rules based on their Actions. Values formatted as :, where
            name is the Action to look for, and value is the value to find.
            Multiple filters can be declared by using a comma delimited list.
            Wildcards are supported in both the name and value fields.

            For example:

            Single filter. has_action=set_licenses:123456

            Multiple filters. has_action=set_groups:123456,set_usertype:*

            Wildcard for actions. has_action=*:123456

            Wildcard for action values. has_action=set_userprincipalname:*
          in: query
          name: has_action
          type: string
          x-example: 'has_action=set_groups:123456,set_usertype:*'
        - description: >-
            Filters Rules based on their action types.

            Allowed values are:

            builtin - actions that involve standard attributes custom - actions
            that involve custom attributes none - no actions are defined For
            example:

            Find Rules with no actions has_action_type=none
          enum:
            - builtin
            - custom
            - none
          in: query
          name: has_action_type
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/mapping'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings
      operationId: listMappings
      summary: List Mappings
  '/2/mappings/{mapping_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: The id of the user mapping to locate.
          in: path
          name: mapping_id
          required: true
          type: integer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/mapping'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: Get Mapping
      operationId: getMapping
      summary: Get Mapping
    delete:
      produces:
        - application/json
      parameters:
        - description: The id of the user mapping to locate.
          in: path
          name: mapping_id
          required: true
          type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: Delete Mapping
      operationId: deleteMapping
      summary: Delete Mapping
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: The id of the user mapping to locate.
          in: path
          name: mapping_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            example:
              $ref: '#/definitions/mapping'
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/id'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: Update Mapping
      operationId: updateMapping
      summary: Update Mapping

  /2/mappings/actions:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            items:
              properties:
                name:
                  description: Name of the action
                  example: set Role
                  type: string
                value:
                  description: >-
                    The unique identifier of the action. This should be used
                    when defining actions for a User Mapping.
                  example: add_role
                  type: string
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings' Actions
      operationId: listMappingsActions
      summary: List Actions
  '/2/mappings/actions/{mapping_action_value}/values':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: mapping_action_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              properties:
                name:
                  description: Name or description of operator
                  example: default
                  type: string
                value:
                  description: >-
                    The action operator value to use when creating or updating
                    User Mappings.
                  example: 199848
                  type: integer
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings' Actions' Values
      operationId: listMappingActionValues
      summary: List Actions Values
  /2/mappings/conditions:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              name:
                description: Name of Condition
                example: MemberOf
                type: string
              value:
                description: >-
                  The unique identifier of the condition. This should be used
                  when defining conditions for a User Mapping
                example: member_of
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings' Conditions
      operationId: listMappingConditions
      summary: List Conditions
  '/2/mappings/conditions/{mapping_condition_value}/operators':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: mapping_condition_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              properties:
                name:
                  description: Name or description of operator
                  example: equals
                  type: string
                value:
                  description: >-
                    The condition operator value to use when creating or
                    updating User Mappings.
                  example: '='
                  type: string
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings' Conditions' Operators
      operationId: listMappingConditionsOperators
      summary: List Conditions Operators
  '/2/mappings/conditions/{mapping_condition_value}/values':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: mapping_condition_value
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            items:
              properties:
                name:
                  description: Name or description of operator
                  example: default
                  type: string
                value:
                  description: >-
                    The condition operator value to use when creating or
                    updating User Mappings.
                  example: 199848
                  type: integer
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: List Mappings'  Conditions' Values
      operationId: listMappingContionValues
      summary: List Conditions Values
  /2/mappings/sort:
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            example:
              - 196671
              - 196670
              - 196672
              - 196676
              - 197758
            items:
              type: integer
            type: array
      responses:
        '200':
          description: Successful response
          examples:
            application/json:
              - 197758
              - 196670
              - 196671
              - 196672
              - 196676
          schema:
            items:
              type: integer
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - User Mappings
      description: Bulk Sort Mappings
      operationId: sortMappings
      summary: Bulk Sort
  '/2/mfa/users/{user_id}/devices':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            items:
              properties:
                auth_factor_name:
                  description: >-
                    Authentication factor name, as it appears to administrators
                    in OneLogin.
                  example: OneLogin Voice
                  type: string
                default:
                  default: false
                  description: true = is user’s default MFA device for OneLogin.
                  type: boolean
                device_id:
                  description: MFA device identifier.
                  example: '3920373'
                  type: string
                type_display_name:
                  description: >-
                    Authentication factor display name as it appears to users
                    upon initial registration, as defined by admins at Settings
                    > Authentication Factors.
                  example: OneLogin Voice
                  type: string
                user_display_name:
                  description: >-
                    Authentication factor display name assigned by users when
                    they register the device.
                  example: OneLogin Voice
                  type: string
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Get a user authentication devices
      operationId: getAuthenticationDevices
      summary: Get User Devices
  '/2/mfa/users/{user_id}/devices/{device_id}':
    delete:
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: path
          name: device_id
          required: true
          type: string
      responses:
        '204':
          description: No Content
      tags:
        - Multi Factor Authentication
      description: Delete a user\'s authentication device
      operationId: deleteEnrolledFactor
      summary: Delete Enrolled Factor
  '/2/mfa/users/{user_id}/factors':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              type: string
          schema:
            properties:
              auth_factor_name:
                description: Internal use only
                example: Onelogin
                type: string
              factor_id:
                description: >-
                  Identifier for the factor which will be used for user
                  enrollment
                example: 598524
                type: integer
              name:
                description: >-
                  Authentication factor name, as it appears to administrators in
                  OneLogin.
                example: Onelogin Protect
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Get a user\'s available authentication factors
      operationId: getAuthFactors
      summary: Get User Factors
  '/2/mfa/users/{user_id}/mfa_token':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              expires_in:
                description: >-
                  Set the duration of the token in seconds. Token expiration
                  defaults to 259200 seconds = 72 hours. 72 hours is the max
                  value.
                example: 300
                type: integer
              reusable:
                default: false
                description: >-
                  Defines if the token is reusable multiple times within the
                  expiry window. Value defaults to false. If set to true, token
                  can be used multiple times, until it expires.
                type: boolean
            type: object
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              type: string
          schema:
            properties:
              device_id:
                description: >-
                  A unique identifier for the temp otp device that has been
                  created for this token.
                example: user_temp_otp_36216766
                type: string
              expires_at:
                description: >-
                  Defines the expiration time and date for the token. Format is
                  UTC time.
                example: '2020-06-26T21:52:56Z'
                type: string
              mfa_token:
                description: >-
                  Token can function as a temporary MFA token. It can be used to
                  authenticate for any app when valid.
                example: UIOWE787979
                type: string
              reusable:
                default: false
                description: >-
                  true indcates the token can be used multiple times, until it
                  expires. false indicates the token is invalid after a single
                  use or once it expires. Defaults to false.
                type: boolean
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Create new MFA token on the user's account
      operationId: generateOTP
      summary: Generate MFA token
  '/2/mfa/users/{user_id}/registrations':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              custom_message:
                description: >-
                  Only applies to SMS factor.

                  A message template that will be sent via SMS. Max length of
                  the message after template items are inserted is 160
                  characters including the OTP code. SMS must already be
                  configured by the user.

                  The following template variables can be included in the
                  message. - {{otp_code}} - The security code. - {{otp_expiry}}
                  - The number of minutes until the one time code expires.
                type: string
              display_name:
                description: A name for the users device
                example: OneLogin SMS
                type: string
              expires_in:
                description: 'Defaults to 120. Valid values are: 120-900 seconds.'
                type: string
              factor_id:
                description: >-
                  The identifier of the factor to enroll the user with. See Get
                  Available Factors for a list of possible id values.
                example: 58959
                type: integer
              redirect_to:
                description: >-
                  Only applies to Email MagicLink factor. Redirects MagicLink
                  success page to specified URL after 2 seconds. Email must
                  already be configured by the user.
                type: string
              verified:
                description: >-
                  Defaults to false. The following factors support verified =
                  true as part of the initial registration request: OneLogin
                  SMS, OneLogin Voice, OneLogin Email. When using verified =
                  true it is critical that the supported factors have
                  pre-verified values, most likely imported from an existing
                  directory or by the users themselvdes.

                  Factors such as Authenticator and OneLogin Protect do not
                  support verification = true as the user interaction is
                  required to verify the factor.
                type: boolean
            required:
              - factor_id
              - display_name
            type: object
      responses:
        '201':
          description: Created
          headers:
            Accept-Language:
              type: string
            Cache-Control:
              type: string
            Content-Length:
              type: integer
            Content-Type:
              type: string
            Date:
              type: string
            X-Content-Type-Options:
              type: string
            X-Request-Id:
              type: string
          schema:
            properties:
              auth_factor_name:
                description: >-
                  Authentication factor name, as it appears to administrators in
                  OneLogin.
                example: OneLogin Voice
                type: string
              device_id:
                description: MFA device identifier.
                example: '3920373'
                type: string
              id:
                description: Verification identifier used in subsequent verification step.
                example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
                type: string
              type_display_name:
                description: >-
                  Authentication factor display name as it appears to users upon
                  initial registration, as defined by admins at Settings >
                  Authentication Factors.
                example: OneLogin Voice
                type: string
              user_display_name:
                description: >-
                  Authentication factor display name assigned by users when they
                  register the device.
                example: OneLogin Voice
                type: string
              user_id:
                description: User identifier
                example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Create a new registration process
      operationId: createFactorRegistration
      summary: Create Factor Registration
  '/2/mfa/users/{user_id}/registrations/{registration_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: The id of a registration
          in: path
          name: registration_id
          required: true
          type: string
          x-example: <UUID>
      responses:
        '200':
          description: OK
          examples:
            application/json:
              id: ca332b26-0d83-444f-956b-0dbf004a3f03
              status: pending
          headers:
            Accept-Language:
              type: string
            Cache-Control:
              type: string
            Content-Length:
              type: integer
            Content-Type:
              type: string
            Date:
              type: string
            X-Content-Type-Options:
              type: string
            X-Request-Id:
              type: string
          schema:
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Get registration state by id
      operationId: getUserRegistration
      summary: Get User Registration
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: The id of a registration
          in: path
          name: registration_id
          required: true
          type: string
          x-example: <UUID>
        - in: body
          name: body
          schema:
            example:
              otp: 58959
            properties:
              otp:
                description: >-
                  One-Time-Password (OTP) that was sent to the user based on the
                  chosen factor. OneLogin SMS and OneLogin Email support this
                  OTP code.
                type: integer
            type: object
      responses:
        '200':
          description: OK
          headers:
            Accept-Language:
              type: string
            Cache-Control:
              type: string
            Content-Length:
              type: integer
            Content-Type:
              type: string
            Date:
              type: string
            X-Content-Type-Options:
              type: string
            X-Request-Id:
              type: string
          schema:
            properties:
              device_id:
                description: Device id to be used with Verify the Factor.
                example: '3926157'
                type: string
              id:
                description: Registration identifier.
                example: 44aa6883-5048-4cd5-8cb2-64d47784230c
                type: string
              status:
                description: >-
                  pending registration has not been completed successfully.
                  accepted registration has successfully completed.
                example: accepted
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Submit an otp for verification.
      operationId: verifyUserRegistration
      summary: Verify User Registration
  '/2/mfa/users/{user_id}/verifications':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - in: body
          name: body
          schema:
            properties:
              custom_message:
                description: >-
                  Only applies to SMS factor.

                  A message template that will be sent via SMS. Max length of
                  the message after template items are inserted is 160
                  characters including the OTP code. SMS must already be
                  configured by the user.

                  The following template variables can be included in the
                  message. - {{otp_code}} - The security code. - {{otp_expiry}}
                  - The number of minutes until the one time code expires.
                type: string
              device_id:
                description: Specifies the factor to be verified.
                example: 58959
                type: integer
              display_name:
                description: A name for the users device
                example: OneLogin SMS
                type: string
              expires_in:
                description: 'Defaults to 120. Valid values are: 120-900 seconds.'
                type: string
              redirect_to:
                description: >-
                  Only applies to Email MagicLink factor. Redirects MagicLink
                  success page to specified URL after 2 seconds. Email must
                  already be configured by the user.
                type: string
            required:
              - device_id
            type: object
      responses:
        '201':
          description: Created
          examples:
            application/json:
              device_id: 489339
              factor_data:
                totp_url: <string>
                verification_token: <string>
              id: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
              status: pending
              user_id: 2323
          headers:
            Content-Type:
              type: string
          schema:
            properties:
              auth_factor_name:
                description: >-
                  Authentication factor name, as it appears to administrators in
                  OneLogin.
                example: OneLogin Voice
                type: string
              device_id:
                description: Specifies the factor to be verified.
                example: 58959
                type: integer
              display_name:
                description: A name for the users device
                example: OneLogin SMS
                type: string
              expires_at:
                description: >-
                  A short lived token that is required to Verify the Factor.
                  This token expires based on the expires_in parameter passed
                  in.
                example: '2020-07-11T22:24:50Z'
                type: string
              id:
                description: Registration identifier.
                example: 44aa6883-5048-4cd5-8cb2-64d47784230c
                type: string
              redirect_to:
                description: >-
                  Only applies to Email MagicLink factor. Redirects MagicLink
                  success page to specified URL after 2 seconds. Email must
                  already be configured by the user.
                type: string
              type_display_name:
                description: >-
                  Authentication factor display name as it appears to users upon
                  initial registration, as defined by admins at Settings >
                  Authentication Factors.
                example: OneLogin Voice
                type: string
              user_display_name:
                description: >-
                  Authentication factor display name assigned by users when they
                  register the device.
                example: OneLogin Voice
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Create a new verification process
      operationId: createDeviceVerification
      summary: Create Device Verification
  '/2/mfa/users/{user_id}/verifications/{verification_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: >-
            The verification_id is returned on activation of the factor or you
            can get the device_id using the Activate Factor API call.
          in: path
          name: verification_id
          required: true
          type: string
          x-example: <UUID>
      responses:
        '200':
          description: OK
          schema:
            properties:
              device_id:
                description: Device Id to be used with verify factor
                example: '331991'
                type: string
              id:
                description: registration identifier
                example: 5a0ba80a-39a1-4627-9a8b-1273278b34ee
                type: string
              status:
                description: >-
                  pending = has not been completed. accepted registration has
                  successfully completed, rejected user has denied the MFA
                  attempt or incorrectly provided the OneLogin Voice OTP code.
                example: pending
                type: string
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Get verification state by id
      operationId: getUserVerification
      summary: Get User Verification
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: >-
            The verification_id is returned on activation of the factor or you
            can get the device_id using the Activate Factor API call.
          in: path
          name: verification_id
          required: true
          type: string
          x-example: <UUID>
        - in: body
          name: body
          schema:
            properties:
              device_id:
                description: >-
                  ID of the specified device which has been registerd for the
                  given user. Available on Get Devices API call.
                example: 98765
                type: integer
              otp:
                description: OTP code provided by the device or SMS message sent to user.
                example: '123456'
                type: string
            type: object
      responses:
        '200':
          description: OK
          examples:
            application/json:
              code: 200
              error: false
              message: success
              type: success
          headers:
            Content-Type:
              type: string
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '403':
          description: Forbidden
          examples:
            application/json:
              message: Not allowed to destroy specified resource
              name: ForbiddenError
              statusCode: 403
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Multi Factor Authentication
      description: Submit an otp for verification.
      operationId: verifyUserVerification
      summary: Verify User Verification
  /2/risk/events:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              device:
                $ref: '#/definitions/risk_device'
              fp:
                $ref: '#/definitions/fp'
              ip:
                $ref: '#/definitions/ip'
              published:
                description: >-
                  Date and time of the event in IS08601 format. Useful for
                  preloading old events. Defaults to date time this API request
                  is received.
                type: string
              session:
                $ref: '#/definitions/session'
              source:
                $ref: '#/definitions/source'
              user:
                $ref: '#/definitions/risk_user'
              user_agent:
                $ref: '#/definitions/user_agent'
              verb:
                description: >-
                  Verbs are used to distinguish between different types of
                  events.
                type: string
            required:
              - verb
              - ip
              - user_agent
              - user
            type: object
      responses:
        '200':
          description: No content is returned. This API is fire and forget.
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Track Vigilance AI (Risk Service) Event
      operationId: trackRiskEvent
      summary: Track an Event
  /2/risk/rules:
    post:
      x-terraform-resource-name: "risk_rules"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/risk_rule'
      responses:
        '201':
          description: CREATED
          schema:
            $ref: '#/definitions/risk_rule'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Create Vigilance AI (Risk Service) Rule
      operationId: createRiskRule
      summary: Create Rule
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/risk_rule'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: List Vigilance AI (Risk Service) Rules
      operationId: listRiskRules
      summary: List Rules
    
  '/2/risk/rules/{rule_id}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: rule_id
          required: true
          type: string
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/risk_rule'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: >-
        Use this API to return a single rule that has been created in the Risk
        Sevice.
      operationId: getRiskRule
      summary: get Risk Rule
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: rule_id
          required: true
          type: string
      responses:
        '204':
          description: Successful response
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Delete Vigilance AI (Risk Service)
      operationId: deleteRiskRule
      summary: Delete Rule
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: rule_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              id:
                description: The ID of the Rule to Update
                type: string
            type: object
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/risk_rule'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Update Vigilance AI (Risk Service) Rule
      operationId: updateRiskRule
      summary: Update Rule
  /2/risk/scores:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            properties:
              scores:
                properties:
                  high:
                    type: integer
                  low:
                    type: integer
                  medium:
                    type: integer
                  minimal:
                    type: integer
                  very_high:
                    type: integer
                type: object
              total:
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Get Vigilance AI (Risk Service) Score Summary
      operationId: getRiskScores
      summary: Get Score Summary
  /2/risk/verify:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: >-
            Optional ISO8601 formatted date string. Defaults to current date.
            Maximum date is 90 days ago.
          in: query
          name: before
          type: string
        - description: >-
            Optional ISO8601 formatted date string. Defaults to 30 days ago.
            Maximum date is 90 days ago.
          in: query
          name: after
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              device:
                $ref: '#/definitions/risk_device'
              fp:
                $ref: '#/definitions/fp'
              ip:
                $ref: '#/definitions/ip'
              session:
                $ref: '#/definitions/session'
              source:
                $ref: '#/definitions/source'
              user:
                $ref: '#/definitions/risk_user'
              user_agent:
                $ref: '#/definitions/user_agent'
            required:
              - ip
              - user_agent
              - user
            type: object
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              score:
                description: >-
                  A risk score 0 is low risk and 100 is the highest risk level
                  possible.
                maximum: 100
                minimum: 0
                type: number
              triggers:
                description: >-
                  Triggers are indicators of some of the key items that
                  influenced the risk score.
                items:
                  type: string
                type: array
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Vigilance AI
      description: Get Vigilance AI (Risk Service) Score
      operationId: getRiskScore
      summary: Get a Risk Score
  /2/roles:
    post:
      x-terraform-resource-name: "roles"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/role'
      responses:
        '201':
          description: CREATED
          schema:
            $ref: '#/definitions/role'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Create Role
      operationId: createRole
      summary: Create Role
    get:
      produces:
        - application/json
      parameters:
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: Optional. Filters by role name.
          in: query
          name: role_name
          type: string
        - in: query
          name: app_id
          required: true
          type: integer
        - description: Optional. Returns roles that contain this app name.
          in: query
          name: app_name
          type: string
        - description: Optional. Comma delimited list of fields to return.
          enum:
            - apps
            - users
            - admins
          in: query
          name: fields
          type: string
      responses:
        '200':
          description: OK
          headers:
            After-Cursor:
              description: >-
                A string that can be used to request the page of results that
                follows the current page using the same set of search filters
                and pagination options.
              type: string
            Before-Cursor:
              description: >-
                A string that can be used to request the page of results that
                preceed the current page using the same set of search filters
                and pagination options.
              type: string
            Current-Page:
              description: The index number of the current page being returned.
              type: integer
            Link:
              description: 'A set of urls which contains premade links for first, next'
              type: array
            Page-Items:
              description: The number of items returned in the response.
              type: integer
            Total-Count:
              description: The total number of items across all pages.
              type: integer
            Total-Pages:
              description: The total number of pages to return all results.
              type: integer
          schema:
            items:
              $ref: '#/definitions/role'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: List Roles
      operationId: listRoles
      summary: List Roles
  '/2/roles/{role_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/role'
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Get Role
      operationId: getRole
      summary: Get Role by ID
    delete:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
      responses:
        '204':
          description: NO CONTENT
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '403':
          description: Forbidden
          examples:
            application/json:
              message: Not allowed to destroy specified resource
              name: ForbiddenError
              statusCode: 403
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Delete Role
      operationId: deleteRole
      summary: Delete Role by ID
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: '#/definitions/role'
      responses:
        '200':
          description: OK
          schema:
            properties:
              id:
                type: integer
            type: object
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Update Role
      operationId: updateRole
      summary: Update Role
  '/2/roles/{role_id}/admins':
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              user_id:
                items:
                  $ref: '#/definitions/id'
                type: array
            type: object
      responses:
        '204':
          description: NO CONTENT
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Remove Role Admins
      operationId: removeRoleAdmins
      summary: Remove Role Admins
    get:
      produces:
        - applcation/json
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: >-
            Allows you to filter on first name, last name, username, and email
            address.
          in: query
          name: name
          type: string
        - description: >-
            Optional. Defaults to false. Include users that aren’t assigned to
            the role.
          in: query
          name: include_unassigned
          type: boolean
      responses:
        '200':
          description: OK
          headers:
            After-Cursor:
              description: >-
                A string that can be used to request the page of results that
                follows the current page using the same set of search filters
                and pagination options.
              type: string
            Before-Cursor:
              description: >-
                A string that can be used to request the page of results that
                preceed the current page using the same set of search filters
                and pagination options.
              type: string
            Current-Page:
              description: The index number of the current page being returned.
              type: integer
            Link:
              description: 'A set of urls which contains premade links for first, next'
              type: array
            Page-Items:
              description: The number of items returned in the response.
              type: integer
            Total-Count:
              description: The total number of items across all pages.
              type: integer
            Total-Pages:
              description: The total number of pages to return all results.
              type: integer
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Get Role Admins
      operationId: getRoleAdmins
      summary: Get Role Admins
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            description: 'Set user_id values in array,'
            items:
              $ref: '#/definitions/id'
            type: array
      responses:
        '200':
          description: OK
          schema:
            items:
              properties:
                id:
                  $ref: '#/definitions/id'
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Add Role Admins
      operationId: addRoleAdmins
      summary: Add Role Admins
  '/2/roles/{role_id}/apps':
    get:
      produces:
        - applcation/json
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: >-
            Optional. Defaults to true. Returns all apps not yet assigned to the
            role.
          in: query
          name: assigned
          type: boolean
      responses:
        '200':
          description: OK
          headers:
            After-Cursor:
              description: >-
                A string that can be used to request the page of results that
                follows the current page using the same set of search filters
                and pagination options.
              type: string
            Before-Cursor:
              description: >-
                A string that can be used to request the page of results that
                preceed the current page using the same set of search filters
                and pagination options.
              type: string
            Current-Page:
              description: The index number of the current page being returned.
              type: integer
            Link:
              description: 'A set of urls which contains premade links for first, next'
              type: array
            Page-Items:
              description: The number of items returned in the response.
              type: integer
            Total-Count:
              description: The total number of items across all pages.
              type: integer
            Total-Pages:
              description: The total number of pages to return all results.
              type: integer
          schema:
            items:
              example:
                icon_url: 'https://testurl.com'
                id: 345
                name: Dropbox
              properties:
                icon_url:
                  description: url of Icon
                  format: url
                  type: string
                id:
                  description: app id
                  type: integer
                name:
                  description: app name
                  type: string
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Get Role Apps
      operationId: getRoleApps
      summary: Get all Apps assigned to Role
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            description: >-
              The complete list of app_id values to assign to the role. Don't
              submit a partial list of app IDs.
            items:
              $ref: '#/definitions/id'
            type: array
      responses:
        '200':
          description: The response returns an array of app IDs sent in the request.
          schema:
            items:
              properties:
                id:
                  $ref: '#/definitions/id'
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Set Role Apps
      operationId: setRoleApps
      summary: Set Role Apps
  '/2/roles/{role_id}/users':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            description: 'Set user_id values in array,'
            items:
              $ref: '#/definitions/id'
            type: array
      responses:
        '200':
          description: OK
          schema:
            items:
              properties:
                id:
                  $ref: '#/definitions/id'
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '422':
          description: Unprocessable Entity
          examples:
            application/json:
              message: invalid value in \"auth_method\"
              name: UnprocessableEntityError
              statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Add Role Users
      operationId: addRoleUsers
      summary: Add Role Users
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              user_id:
                items:
                  $ref: '#/definitions/id'
                type: array
            type: object
      responses:
        '204':
          description: NO CONTENT
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Remove Role Users
      operationId: removeRoleUsers
      summary: Remove Role Users
    get:
      produces:
        - applcation/json
        - application/json
      parameters:
        - description: Set to the id of the role you want to return.
          in: path
          name: role_id
          required: true
          type: string
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: >-
            Allows you to filter on first name, last name, username, and email
            address.
          in: query
          name: name
          type: string
        - description: >-
            Optional. Defaults to false. Include users that aren’t assigned to
            the role.
          in: query
          name: include_unassigned
          type: boolean
      responses:
        '200':
          description: OK
          headers:
            After-Cursor:
              description: >-
                A string that can be used to request the page of results that
                follows the current page using the same set of search filters
                and pagination options.
              type: string
            Before-Cursor:
              description: >-
                A string that can be used to request the page of results that
                preceed the current page using the same set of search filters
                and pagination options.
              type: string
            Current-Page:
              description: The index number of the current page being returned.
              type: integer
            Link:
              description: 'A set of urls which contains premade links for first, next'
              type: array
            Page-Items:
              description: The number of items returned in the response.
              type: integer
            Total-Count:
              description: The total number of items across all pages.
              type: integer
            Total-Pages:
              description: The total number of pages to return all results.
              type: integer
          schema:
            example:
              - added_at: '2019-12-27T00:00:00Z'
                added_by:
                  id: 678
                  name: Susan Boss
                assigned: true
                id: 345
                name: Joe User
                username: joe.user@example.com
            items:
              $ref: '#/definitions/user'
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              message: This request requires Authentication
              name: UnauthorizedError
              statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
        '404':
          description: Not Found
          examples:
            application/json:
              message: >-
                The resource can't be found or the server has not found anything
                matching the Request-URI
              name: NotFoundError
              statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      tags:
        - Roles
      description: Get Role Users
      operationId: getRoleUsers
      summary: Get Role Users
    
  /2/saml_assertion:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/saml_assert'
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                items:
                  type: object
                type: array
              status:
                $ref: '#/definitions/Error'
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      tags:
        - SAML Assertions
      description: Generate SAML Assertion
      operationId: generateSamlAssert2
      summary: Generate SAML Assertion
  /2/saml_assertion/verify_factor:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - default: application/json
          in: header
          name: Content-Type
          type: string
          x-example: application/json
        - in: body
          name: body
          schema:
            $ref: '#/definitions/saml_factor'
      responses:
        '200':
          description: Successful response
          schema:
            properties:
              data:
                description: Provides the SAML assertion.
                example: >-
                  PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSZjE5Y2EyMTI0ZGMxNzJmNzhmMjI3OTk3YzMwOTBkODVkNzFjYWMzOCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjAtM
                type: string
              message:
                description: Plain text description describing the outcome of the response.
                example: SMS token sent to your mobile device. Authentication pending
                type: string
            type: object
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - SAML Assertions
      description: 'Verify Factor: SAML'
      operationId: verFactorSaml2
      summary: Verify Factor SAML
  /2/users:
    post:
      x-terraform-resource-name: "users"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: >-
            Controls how mappings will be applied to the user on creation.
            Defaults to async.
          enum:
            - async
            - sync
            - disabled
          in: query
          name: mappings
          type: string
        - description: Will passwords validate against the User Policy? Defaults to true.
          in: query
          name: validate_policy
          type: boolean
        - in: body
          name: body
          schema:
            $ref: '#/definitions/user'
      responses:
        '201':
          description: The full user resource is returned
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Create User
      operationId: createUser2
      summary: Create User
    get:
      produces:
        - application/json
      parameters:
        - description: How many items to return at one time (max 100)
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: The page number of results to return.
          in: query
          name: page
          type: integer
        - description: >-
            Set to the value extracted from Before-Cursor or After-Cursor
            headers to return the previous or next page.
          in: query
          name: cursor
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users created after a
            given date & time.
          in: query
          name: created_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users created before a
            given date & time.
          in: query
          name: created_until
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users updated after a
            given date & time.
          in: query
          name: updated_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users updated before a
            given date & time.
          in: query
          name: updated_until
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users that logged in
            after a given date & time.
          in: query
          name: last_login_since
          type: string
        - description: >-
            An ISO8601 timestamp value that returns all users that logged in
            before a given date & time.
          in: query
          name: last_login_until
          type: string
        - description: The first name of the user
          in: query
          name: firstname
          type: string
        - description: The last name of the user
          in: query
          name: lastname
          type: string
        - description: The email address of the user
          in: query
          name: email
          type: string
        - description: The username for the user
          in: query
          name: username
          type: string
        - description: The AD login name for the user
          in: query
          name: samaccountname
          type: string
        - in: query
          name: directory_id
          type: integer
        - description: An external identifier that has been set on the user
          in: query
          name: external_id
          type: string
        - description: A comma separated list of OneLogin User IDs
          in: query
          name: user_ids
          type: string
        - description: >-
            The short name of a custom attribute. Note that the attribute name
            is prefixed with custom_attributes.
          in: query
          name: 'custom_attributes.{attribute_name}'
          type: string
        - description: Optional. Comma delimited list of fields to return.
          enum:
            - apps
            - users
            - admins
          in: query
          name: fields
          type: string
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/user'
            type: array
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Get a list of users
      operationId: listUsers2
      summary: List Users
  '/2/users/{user_id}':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Get User
      operationId: getUser2
      summary: Get User
    delete:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
      responses:
        '204':
          description: 'On success, no content is returned in the response body.'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Delete User
      operationId: deleteUser2
      summary: Delete User
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - description: >-
            Controls how mappings will be applied to the user on creation.
            Defaults to async.
          enum:
            - async
            - sync
            - disabled
          in: query
          name: mappings
          type: string
        - description: Will passwords validate against the User Policy? Defaults to true.
          in: query
          name: validate_policy
          type: boolean
        - in: body
          name: body
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: The full user resource is returned
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          examples:
            application/json:
              code: 400
              error: true
              message: Request Failure
              type: bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Unprocessable
          examples:
            application/json:
              code: 422
              error: true
              message: 'Validation failed: Value has already been taken'
              type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Update User
      operationId: updateUser2
      summary: Update User
  '/2/users/{user_id}/apps':
    get:
      produces:
        - application/json
      parameters:
        - description: Set to the id of the user that you want to return.
          in: path
          name: user_id
          required: true
          type: integer
        - default: false
          description: >-
            Defaults to `false`. When `true` will show all apps that are
            assigned to a user regardless of their portal visibility setting.
          in: query
          name: ignore_visibility
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            items:
              properties:
                extension:
                  description: >-
                    Boolean that indicates if the OneLogin browser extension is
                    required to launch this app.
                  type: boolean
                icon_url:
                  description: >-
                    A url for the icon that represents the app in the OneLogin
                    portal
                  type: string
                id:
                  description: The App ID
                  type: integer
                login_id:
                  description: Unqiue identifier for this user and app combination.
                  type: integer
                name:
                  description: The name of the app.
                  type: string
                provisioning_enabled:
                  description: Indicates if provisioning is enabled for this app.
                  type: boolean
                provisioning_state:
                  description: >-
                    If provisioning is enabled this indicates the state of
                    provisioning for the given user.
                  enum:
                    - unknown
                    - provisioning
                    - modifying
                    - deleting
                    - provisioning_pending_approval
                    - deleting_pending_approval
                    - modifying_pending_approval
                    - linking
                    - provisioned
                    - deleted
                    - modifying_failed
                    - provisioning_failed
                    - deleting_failed
                    - linking_failed
                    - disabled
                    - nonexistent
                    - modifying_pending_approval_then_disabled
                  type: string
                provisioning_status:
                  enum:
                    - enabling
                    - disabling
                    - enabling_pending_approval
                    - disabling_pendding_approval
                    - enabled
                    - disabled
                    - disabling_failed
                    - enabling_failed
                  type: string
              type: object
            type: array
        '401':
          description: Unauthorized
          examples:
            application/json:
              code: 401
              error: true
              message: Unauthorized Error
              type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not Found
          examples:
            application/json:
              code: 404
              error: true
              message: No Route Exists
              type: Not Found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Users V2
      description: Get User Apps
      operationId: getUserApps2
      summary: Get User Apps
definitions:
  Error:
    properties:
      code:
        example: 200
        type: integer
      error:
        example: false
        type: boolean
      message:
        example: Success
        type: string
      type:
        example: Success
        type: string
    required:
      - code
      - message
    type: object
  action_obj:
    properties:
      action:
        description: The action to apply
        type: string
      value:
        description: >-
          Only applicable to provisioned and set_* actions. Items in the array
          will be a plain text string or valid value for the selected action.
        items:
          example: '2'
          type: string
        type: array
    type: object
  altErr:
    properties:
      message:
        description: Description of Error
        example: Settings Updated
        type: string
      name:
        description: Error Code Name
        example: Success
        type: string
      statusCode:
        description: >-
          HTTP error code
          https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
        example: 200
        type: integer
    type: object
  app_parameters:
    additionalProperties: true
    description: >-
      The parameters section contains parameterized attributes that have defined
      at the connector level as well as custom attributes that have been defined
      specifically for this app. Regardless of how they are defined, all
      parameters have the following attributes.

      Each parameter is an object with the key for the object being set as the
      parameters short name.
    properties:
      include_in_saml_assertion:
        description: >-
          When true, this parameter will be included in a SAML assertion
          payload.
        example: true
        type: boolean
      label:
        description: >-
          The can only be set when creating a new parameter. It can not be
          updated.
        type: string
      user_attribute_macros:
        description: >-
          When `user_attribute_mappings` is set to `_macro_` this macro will be
          used to assign the parameter value.
        type: string
      user_attribute_mappings:
        description: >-
          A user attribute to map values from For custom attributes prefix the
          name of the attribute with `custom_attribute_`. e.g. To get the value
          for custom attribute `employee_id` use `custom_attribute_employee_id`.
        type: string
    type: object
  app_rule:
    properties:
      actions:
        items:
          $ref: '#/definitions/action_obj'
        type: array
      conditions:
        description: >-
          An array of conditions that the user must meet in order for the rule
          to be applied.
        items:
          $ref: '#/definitions/condition'
        type: array
      enabled:
        description: Indicates if the rule is enabled or not.
        type: boolean
      id:
        description: App Rule ID
        example: 196670
        type: integer
      match:
        description: Indicates how conditions should be matched.
        enum:
          - all
          - any
        type: string
      name:
        description: Rule Name
        example: My first app rule
        type: string
      position:
        description: >-
          Indicates the order of the rule. When `null` this will default to last
          position.
        example: 1
        type: integer
    type: object
  auth_claim:
    properties:
      name:
        description: The attribute name for the claim when its returned in an Access Token
        example: email_address
        type: string
      user_attribute_macros:
        description: >-
          When `user_attribute_mappings` is set to `_macro_` this macro will be
          used to assign the parameter value.
        type: string
      user_attribute_mappings:
        description: >-
          A user attribute to map values from For custom attributes prefix the
          name of the attribute with `custom_attribute_`. e.g. To get the value
          for custom attribute `employee_id` use `custom_attribute_employee_id`.
        example: email
        type: string
    required:
      - name
    type: object
  auth_id:
    properties:
      id:
        description: Unique ID for the Scope
        example: 323005
        type: integer
    type: object
  auth_method:
    description: |-
      An ID indicating the type of app:
        - 0: Password
        - 1: OpenId
        - 2: SAML
        - 3: API
        - 4: Google
        - 6: Forms Based App
        - 7: WSFED
        - 8: OpenId Connect
    enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
    example: 8
    type: integer
  auth_scope:
    properties:
      description:
        description: A description of what access the scope enables
        example: A custom scope
        type: string
      id:
        description: Unique ID for the Scope
        example: 323005
        readOnly: true
        type: integer
      value:
        description: A value representing the api scope that with be authorized
        example: 'custom:scope'
        type: string
    type: object
  auth_server:
    description: base resource for configuring api authorization in OneLogin
    properties:
      configuration:
        $ref: '#/definitions/auth_server_configuration'
      description:
        description: Description of what the API does.
        example: API manages contacts
        type: string
      id:
        description: Auth server unique ID in Onelogin
        example: 1022697
        readOnly: true
        type: integer
      name:
        description: Name of the API.
        example: Contacts API
        type: string
    required:
      - name
      - description
      - configuration
    type: object
  auth_server_configuration:
    description: Authorization server configuration
    properties:
      access_token_expiration_minutes:
        description: >-
          The number of minutes until access token expires. There is no maximum
          expiry limit.
        example: 20
        type: integer
      audiences:
        description: List of API endpoints that will be returned in Access Tokens.
        items:
          type: string
        type: array
      refresh_token_expiration_minutes:
        description: >-
          The number of minutes until refresh token expires. There is no maximum
          expiry limit.
        example: 30
        type: integer
      resource_identifier:
        description: >-
          Unique identifier for the API that the Authorization Server will issue
          Access Tokens for.
        example: 'https://example.com/contacts'
        type: string
    required:
      - resource_identifier
      - audiences
    type: object
  client_app_full:
    properties:
      api_auth_id:
        example: 1033034
        type: integer
      app_id:
        description: Unique Client App ID
        example: 1026152
        type: integer
      name:
        description: Name of client app
        example: An oidc app
        type: string
      scopes:
        description: List of All Scopes assigned to a client app
        items:
          $ref: '#/definitions/scope'
        type: array
    type: object
  clock_counter:
    description: >-
      unit: - 0 = Seconds - 1 = Minutes - 2 = Hours value: - When Unit = 0 or 1
      value must be 0-60 - When Unit = 2 value must be 0-24
    example:
      unit: 1
      value: 30
    properties:
      unit:
        type: integer
      value:
        type: integer
    type: object
  condition:
    description: Conditions in which mappings are applied
    properties:
      operator:
        description: A valid operator for the selected condition source
        example: '>'
        type: string
      source:
        description: source field to check.
        example: last_login
        type: string
      value:
        description: A plain text string or valid value for the selected  condition source
        example: '90'
        type: string
    type: object
  configuration_oidc:
    properties:
      access_token_expiration_minutes:
        description: Number of minutes the refresh token will be valid for.
        example: 1
        type: integer
      login_url:
        description: >-
          The OpenId Connect Client Id. Note that client_secret is only returned
          after Creating an App.
        type: string
      oidc_application_type:
        description: '- 0 : Web - 1 : Native / Mobile'
        enum:
          - 0
          - 1
        example: 0
        type: integer
      redirect_uri:
        description: >-
          Comma or newline separated list of valid redirect uris for the OpenId
          Connect Authorization Code flow.
        example: 'https://localhost:3000/callback'
        type: string
      refresh_token_expiration_minutes:
        description: Number of minutes the refresh token will be valid for.
        example: 1
        type: integer
      token_endpoint_auth_method:
        description: '- 0: Basic - 1: POST - 2: None / PKCE'
        enum:
          - 0
          - 1
          - 2
        type: integer
    required:
      - login_url
      - redirect_uri
      - access_token_expiration_minutes
      - refresh_token_expiration_minutes
      - token_endpoint_auth_method
      - oidc_application_type
    type: object
  configuration_saml:
    properties:
      certificate_id:
        description: >-
          When creating apps the default certificate will be used unless the
          `certificate_id` attribute is applied in the `configuration` object.
        example: 123456
        type: integer
      signature_algorithm:
        description: |-
          One of the following:
            - SHA-1
            - SHA-256
            - SHA-348
            - SHA-512
        example: SHA-512
        type: string
    required:
      - signature_algorithm
      - certificate_id
    type: object
  connector:
    properties:
      allows_new_parameters:
        description: >-
          Indicates if apps created using this connector will be allowed to
          create custom parameters.
        type: boolean
      auth_method:
        $ref: '#/definitions/auth_method'
      icon_url:
        description: A link to the icon's url.
        example: >-
          https://cdn-shadow.onlgn.net/images/icons/square/amazonwebservices3multirole/old_original.png?1421095823
        type: string
      id:
        description: Connectors unique ID in OneLogin.
        example: 1061937
        type: integer
      name:
        description: Name of Connector
        example: Amazon Web Services Multi-Role
        type: string
    type: object
  device:
    properties:
      device_id:
        description: >-
          an ID for the device type that must be submitted with the Verify
          Factor API call.
        example: 654984
        type: integer
      device_type:
        description: >-
          Lists an available MFA device type, such as OneLogin OTP SMS or Google
          Authenticator.
        example: Google Authenticator
        type: string
    type: object
  devices:
    example:
      - device_id: 51684
        device_type: Google Authenticator
    items:
      $ref: '#/definitions/device'
    type: array
  email_config:
    properties:
      address:
        description: Email Settings server address
        example: smtp.sendgrid.net
        type: string
      domain:
        description: Domain of the From address.
        example: example.com
        type: string
      from:
        description: The From email address in the message.
        example: email@example.com
        type: string
      password:
        description: >-
          The password of the account to authenticate with the Email Settings
          server.
        example: password
        format: password
        type: string
      port:
        default: 25
        description: Defaults to 25.
        example: 587
        type: integer
      use_tls:
        default: true
        description: Use TLS
        example: true
        type: boolean
      user_name:
        description: >-
          The user name of the account to authenticate with the Email Settings
          server.
        example: user-name
        type: string
    required:
      - address
      - from
      - domain
    type: object
  enforcement_point:
    description: >-
      For apps that connect to a OneLogin Access Enforcement Point the following
      enforcement_point object will be included with the app payload.
    properties:
      case_sensitive:
        description: >-
          The URL path evaluation is case insensitive by default. Resources
          hosted on web servers such as Apache, NGINX and Java EE are case
          sensitive paths. Web servers such as Microsoft IIS are not
          case-sensitive.
        example: false
        type: boolean
      conditions:
        description: >-
          If access is conditional, the conditions that must evaluate to true to
          allow access to a resource. For example, to require the user must be
          authenticated and have either the role Admin or User
        example: ''
        type: string
      context_root:
        description: >-
          The root path to the application, often the name of the application.
          Can be any name, path or just a slash (“/”). The context root uniquely
          identifies the application within the enforcement point.
        example: /
        type: string
      landing_page:
        description: >-
          The location within the context root to which the browser will be
          redirected for IdP-initiated single sign-on. For example, the landing
          page might be an index page in the context root such as index.html or
          default.aspx. The landing page cannot begin with a slash and must use
          valid URL characters.
        example: ''
        type: string
        x-nullable: true
      permissions:
        description: >-
          Specify to always `allow`, `deny` access to resources, of if access is
          `conditional`.
        enum:
          - allow
          - deny
          - conditional
        example: allow
        type: string
      require_sitewide_authentication:
        description: >-
          Require user authentication to access any resource protected by this
          enforcement point.
        example: false
        type: boolean
      resources:
        description: Array of resource objects
        example:
          - conditions: ''
            is_path_regex: false
            path: /
            permissions: allow
            require_auth: false
            resource_id: 809
        items:
          properties:
            conditions:
              description: required if permission == "conditions"
              type: string
            is_path_regex:
              type: boolean
              x-nullable: true
            path:
              example: /
              type: string
            permission:
              enum:
                - allow
                - deny
                - conditions
              type: string
            require_auth:
              example: false
              type: boolean
          type: object
        type: array
      session_expiry_fixed:
        $ref: '#/definitions/clock_counter'
      session_expiry_inactivity:
        $ref: '#/definitions/clock_counter'
      target:
        description: >-
          A fully-qualified URL to the internal application including scheme,
          authority and path. The target host authority must be an IP address,
          not a hostname.
        example: ''
        type: string
        x-nullable: true
      token:
        description: Can only be set on create. Access Gateway Token.
        example: b491c647f5e0cff854ad606722ac98342b4b0882
        readOnly: true
        type: string
      use_target_host_header:
        description: >-
          Use the target host header as opposed to the original gateway or
          upstream host header.
        example: false
        type: boolean
      vhost:
        description: >-
          A comma-delimited list of one or more virtual hosts that map to
          applications assigned to the enforcement point. A VHOST may be a host
          name or an IP address. VHOST distinguish between applications that are
          at the same context root.
        example: ''
        type: string
        x-nullable: true
    type: object
  event:
    properties:
      account_id:
        description: Account that triggered the event.
        type: integer
      actor_system:
        description: Acting system that triggered the event when the actor is not a user.
        type: string
      actor_user_id:
        description: ID of the user whose action triggered the event.
        type: integer
      actor_user_name:
        description: First and last name of the user whose action triggered the event.
        type: string
      adc_id:
        type: integer
      app-name:
        description: 'Name of the app involved in the event, if applicable.'
        type: string
      app_id:
        description: 'ID of the app involved in the event, if applicable.'
        type: integer
      assumed_by_superadmin_or_reseller:
        type: integer
      assuming_acting_user_id:
        description: >-
          ID of the user who assumed the role of the acting user to trigger the
          event, if applicable.
        type: integer
      certificate_id:
        type: integer
      client_id:
        description: >-
          Client ID used to generate the access token that made the API call
          that generated the event.
        type: string
      created_at:
        description: >-
          ISO8601 Time and date at which the event was created. This value is
          autogenerated by OneLogin.
        type: string
      custom_message:
        description: More details about the event.
        type: string
      directory_sync_run_id:
        description: Directory sync run ID.
        type: integer
      error_description:
        description: 'Provisioning error details, if applicable.'
        type: string
      event_type_id:
        description: Type of event triggered.
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 31
          - 32
          - 33
          - 34
          - 35
          - 36
          - 37
          - 38
          - 39
          - 40
          - 41
          - 42
          - 43
          - 44
          - 45
          - 46
          - 47
          - 48
          - 49
          - 50
          - 51
          - 52
          - 53
          - 54
          - 55
          - 56
          - 57
          - 58
          - 59
          - 60
          - 61
          - 62
          - 63
          - 64
          - 65
          - 66
          - 67
          - 68
          - 69
          - 70
          - 71
          - 72
          - 73
          - 74
          - 75
          - 76
          - 77
          - 78
          - 79
          - 80
          - 81
          - 82
          - 83
          - 84
          - 85
          - 86
          - 87
          - 88
          - 89
          - 90
          - 91
          - 92
          - 95
          - 96
          - 100
          - 101
          - 102
          - 103
          - 104
          - 105
          - 106
          - 110
          - 111
          - 112
          - 113
          - 114
          - 115
          - 116
          - 117
          - 118
          - 119
          - 120
          - 121
          - 122
          - 123
          - 124
          - 125
          - 126
          - 127
          - 128
          - 129
          - 130
          - 131
          - 132
          - 133
          - 134
          - 135
          - 136
          - 137
          - 138
          - 139
          - 140
          - 141
          - 145
          - 146
          - 147
          - 148
          - 149
          - 150
          - 151
          - 152
          - 153
          - 154
          - 155
          - 156
          - 157
          - 158
          - 159
          - 160
          - 161
          - 162
          - 163
          - 164
          - 165
          - 166
          - 167
          - 168
          - 169
          - 170
          - 171
          - 172
          - 173
          - 174
          - 175
          - 176
          - 177
          - 178
          - 179
          - 180
          - 181
          - 182
          - 183
          - 184
          - 185
          - 186
          - 187
          - 188
          - 189
          - 190
          - 191
          - 192
          - 193
          - 194
          - 195
          - 196
          - 197
          - 198
          - 199
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 209
          - 210
          - 211
          - 212
          - 213
          - 214
          - 215
          - 216
          - 217
          - 218
          - 219
          - 220
          - 221
          - 222
          - 223
          - 224
          - 225
          - 226
          - 227
          - 228
          - 229
          - 230
          - 231
          - 232
          - 233
          - 234
          - 235
          - 236
          - 237
          - 238
          - 239
          - 240
          - 241
          - 242
          - 243
          - 244
          - 245
          - 246
          - 247
          - 248
          - 249
          - 250
          - 251
          - 252
          - 253
          - 254
          - 255
          - 291
          - 300
          - 301
          - 303
          - 304
          - 305
          - 306
          - 307
          - 330
          - 331
          - 332
          - 333
          - 334
          - 400
          - 401
          - 402
          - 410
          - 411
          - 412
          - 501
          - 502
          - 503
          - 510
          - 511
          - 512
          - 513
          - 514
          - 515
          - 516
          - 517
          - 518
          - 519
          - 520
          - 521
          - 522
          - 523
          - 524
          - 525
          - 526
          - 527
          - 528
          - 529
          - 530
          - 531
          - 532
          - 533
          - 534
          - 535
          - 536
          - 537
          - 538
          - 539
          - 540
          - 541
          - 542
          - 545
          - 546
          - 550
          - 551
          - 552
          - 553
          - 554
          - 555
          - 600
          - 601
          - 602
          - 700
          - 701
          - 702
          - 703
          - 704
          - 705
          - 706
          - 800
          - 801
          - 802
          - 803
          - 804
          - 805
          - 900
          - 901
          - 902
          - 903
          - 904
          - 905
          - 906
          - 907
          - 911
          - 912
          - 931
          - 932
          - 950
          - 1001
          - 1002
          - 1010
          - 1100
          - 1101
          - 1200
          - 1201
          - 1244
          - 1245
          - 1300
          - 1301
          - 1302
          - 1303
          - 1304
          - 1305
          - 1400
          - 1401
          - 1402
          - 1403
          - 1404
          - 1405
          - 1406
          - 1407
          - 1408
          - 1409
          - 1410
          - 1411
          - 1412
          - 1413
          - 1414
          - 1415
          - 1416
          - 1417
          - 1418
          - 1419
          - 1420
          - 1421
          - 1422
          - 1423
          - 1424
          - 1500
          - 1501
          - 1502
          - 1503
          - 1504
          - 1505
          - 1506
          - 1507
          - 1508
          - 1509
          - 1510
          - 1511
          - 1512
          - 1513
          - 1514
          - 1600
          - 1601
          - 1602
          - 1603
          - 1604
          - 1605
          - 1606
          - 1607
          - 1608
          - 1609
          - 1700
          - 1701
          - 1702
          - 1801
          - 1802
          - 1900
          - 1901
          - 1902
          - 1903
          - 1904
          - 1905
          - 2000
          - 2001
          - 2002
          - 2003
          - 2004
          - 2005
          - 2006
          - 2007
          - 2008
          - 2009
          - 2010
          - 2011
          - 2012
          - 2013
          - 2014
          - 2015
          - 2016
          - 2017
          - 2018
          - 2100
          - 2101
          - 2102
          - 2103
          - 2104
          - 2105
          - 2106
          - 2107
          - 2108
          - 2109
          - 2110
          - 2111
          - 2112
          - 2113
          - 2114
          - 2201
          - 2202
          - 2203
          - 2204
          - 3000
          - 3001
          - 3002
          - 3003
          - 3004
          - 3005
          - 3006
          - 3007
          - 3008
          - 3009
          - 3010
          - 3011
          - 3012
          - 3013
          - 3014
          - 3015
          - 3016
          - 3017
          - 3018
          - 3019
          - 3020
          - 3021
          - 3022
          - 3023
          - 3024
          - 3025
          - 3026
          - 3027
          - 3028
          - 9000
          - 9001
          - 9002
          - 9003
          - 9004
          - 9005
          - 9006
          - 9007
          - 9008
          - 9009
          - 9010
          - 9011
          - 9012
          - 9013
          - 9014
          - 9015
          - 9016
          - 9017
          - 9018
          - 9019
          - 9020
          - 9021
          - 9022
          - 9023
          - 9024
          - 9025
          - 9026
          - 9027
          - 9028
          - 9029
          - 9030
          - 9031
          - 9032
          - 9033
          - 9034
          - 9035
          - 9036
          - 9037
          - 9038
          - 9039
          - 9040
          - 9041
          - 9042
          - 9043
          - 9044
          - 9045
          - 9046
          - 9047
          - 9048
          - 9049
          - 9050
          - 9051
          - 9052
          - 9053
          - 9054
          - 9055
          - 9056
          - 9057
          - 9058
          - 9059
        type: integer
      group-name:
        description: Name of a group involved in the event.
        type: string
      group_id:
        description: ID of a group involved in the event.
        type: integer
      id:
        description: Event's unique ID in OneLogin. Autogenerated by OneLogin.
        type: integer
      ipaddr:
        description: IP address of the machine used to trigger the event.
        type: string
      mapping_id:
        type: integer
      notes:
        description: More details about the event.
        type: string
      object_id:
        type: integer
      otp_device_id:
        description: ID of a device involved in the event.
        type: integer
      otp_device_name:
        description: Name of a device involved in the event.
        type: string
      param:
        type: string
      policy_id:
        description: ID of the policy involved in the event.
        type: integer
      policy_name:
        description: Name of the policy involved in the event.
        type: string
      policy_type:
        type: string
      privilege_id:
        type: integer
      proxy_ip:
        type: string
      radius_config_id:
        type: integer
      resolved_at:
        type: string
      resource_type_id:
        description: >-
          ID of the resource (user, role, group, and so forth) associated with
          the event.
        type: integer
      risk_cookie_id:
        description: Identifier for risk cookie
        type: string
      risk_reasons:
        type: string
      risk_score:
        type: integer
      role_id:
        description: ID of a role involved in the event.
        type: integer
      role_name:
        description: Name of a role involved in the event.
        type: string
      service_directory_id:
        type: integer
      solved:
        type: boolean
      trusted_idp_id:
        type: integer
      user_field_id:
        type: integer
      user_id:
        description: ID of the user that was acted upon to trigger the event.
        type: integer
      user_name:
        description: Name of the user that was acted upon to trigger the event.
        type: string
    type: object
  fp:
    description: Set to the value of the __tdli_fp cookie.
    type: string
  generic-app:
    x-terraform-computed: true
    properties:
      auth_method_description:
        type: string
        example: "OpenId Connect"
        readOnly: true
      brand_id:
        type: integer
      login_config:
        type: integer
        readOnly: true
        example: 0
      configuration:
        description: Only apply configurations that are applicable to the type of app
        type: object
        properties: 
          redirect_uri:
            type: string
            description: >-
             OIDC Apps only
             Comma or newline separated list of valid redirect uris for the OpenId Connect Authorization Code flow.
          login_url:
            type: string
            description: >-
              OIDC Apps only
              The OpenId Connect Client Id. Note that client_secret is only returned after Creating an App.
          oidc_api_version:
            type: string
            readOnly: true
          oidc_encryption_key:
            type: string
            description: OIDC Apps only
          post_logout_redirect_url:
            type: string
            description: OIDC Apps only
          refresh_token_expiration_minutes:
            type: integer
            readOnly: true
          oidc_application_type:
            type: integer
            description: >-
              OIDC Apps Only
              - 0: Web
              - 1: Native/Mobile
          token_endpoint_auth_method:
            type: integer
            description: >-
             OIDC Apps only
             Number of minutes the refresh token will be valid for.
          access_token_expiration_minutes:
            type: integer
            description: >-
             OIDC Apps only
             Number of minutes the refresh token will be valid for.
          external_role:
            type: string
            description: This is for SAML Apps ONLY.
          external_id:
            type: integer
            description: This is for SAML Apps ONLY.
          certificate_id:
            description: >-
              This is for SAML Apps ONLY.
              When creating apps the default certificate will be used unless the
              `certificate_id` attribute is applied in the `configuration` object.
            example: 123456
            type: integer
          signature_algorithm:
            description: |-
              This is for SAML Apps ONLY.
              One of the following:
                - SHA-1
                - SHA-256
                - SHA-348
                - SHA-512
            example: SHA-512
            type: string
      allow_assumed_signin:
        description: >-
          Indicates whether or not administrators can access the app as a user
          that they have assumed control over.
        example: false
        type: boolean
      auth_method:
        $ref: '#/definitions/auth_method'
      connector_id:
        description: ID of the connector to base the app from.
        example: 108419
        type: integer
      created_at:
        description: the date the app was created
        example: '2018-04-12T21:50:42Z'
        type: string
        readOnly: true
      description:
        description: Freeform description of the app.
        type: string
      enforcement_point:
        $ref: '#/definitions/enforcement_point'
      icon_url:
        description: A link to the apps icon url
        example: /images/missing_connector_icon/square/old_original.png
        type: string
      id:
        description: Apps unique ID in OneLogin.
        example: 775664
        readOnly: true
        type: integer
      name:
        description: The name of the app.
        example: A Sample App
        type: string
      notes:
        description: Freeform notes about the app.
        example: This app is in beta.
        type: string
      policy_id:
        description: The security policy assigned to the app.
        type: integer
      provisioning:
        description: Indicates if provisioning is enabled for this app.
        properties:
          enabled:
            example: true
            type: boolean
          status:
            type: string
            readOnly: true
        type: object
      role_ids:
        description: >-
          List of Role IDs that are assigned to the app. On App Create or Update
          the entire array is replaced with the values provided.
        example:
          - 192513
        items:
          description: Role ID
          type: integer
        type: array
      sso:
        description: >-
          The attributes included in the sso section are determined by the type of app.
          All of the attributes of the `sso` object are read only.
        type: object
        readOnly: true
        properties: 
          client_id:
            type: string
            description: The OpenId Connect Client Id. Note that client_secret is only returned after Creating an OIDC App.
            readOnly: true
          client_secret:
            type: string
            description: OpenId Connet Client Secret
            readOnly: true
          metadata_url:
            type: string
            description: ID of the apps underlying connector.	This is only returned after Creating a SAML App.
            readOnly: true
          acs_url:
            type: string
            description: App Name.	This is only returned after Creating a SAML App.
            readOnly: true
          issuer:
            type: string
            description: Issuer of app.	This is only returned after Creating a SAML App.
            readOnly: true
          certificate:
            type: object
            description: The certificate used for signing.	This is only returned after Creating a SAML App.
            readOnly: true
            properties: 
              id:
                type: integer
              value:
                type: string
              name:
                type: string
      tab_id:
        description: ID of the OneLogin portal tab that the app is assigned to.
        example: 196885
        type: integer
      updated_at:
        description: the date the app was last updated
        example: '2019-05-16T19:20:34Z'
        type: string
        readOnly: true
      visible:
        description: Indicates if the app is visible in the OneLogin portal.
        example: true
        type: boolean
    required:
      - connector_id
      - name
    type: object
  group:
    properties:
      id:
        description: Group's unique Onelogin ID
        example: 425741
        type: integer
        readOnly: true
      name:
        description: Group name
        example: group.security.policy.default
        type: string
      reference:
        description: Deprecated. Will always show the attribute nil="true".
        example: 'null'
        type: string
    type: object
  id:
    type: integer
  ip:
    description: The IP address of the User's request.
    type: string
  mapping:
    properties:
      actions:
        description: >-
          An array of actions that will be applied to the users that are matched
          by the conditions.
        items:
          $ref: '#/definitions/action_obj'
        type: array
      conditions:
        description: >-
          An array of conditions that the user must meet in order for the
          mapping to be applied.
        items:
          $ref: '#/definitions/condition'
        type: array
      enabled:
        description: Indicates if the mapping is enabled or not.
        type: boolean
      id:
        type: integer
      match:
        description: Indicates how conditions should be matched.
        enum:
          - all
          - any
        type: string
      name:
        description: The name of the mapping.
        type: string
      position:
        description: >-
          Indicates the order of the mapping. When `null` this will default to
          last position.
        type: integer
    required:
      - name
      - enabled
      - match
      - position
      - conditions
      - actions
    type: object
  oidc_app:
    allOf:
      - $ref: '#/definitions/generic-app'
      - example:
          allow_assumed_signin: false
          auth_method: 8
          configuration:
            access_token_expiration_minutes: 5
            login_url: 'http://example.com/login'
            oidc_application_type: 0
            oidc_encryption_key: ''
            redirect_uri: 'http://example.com/callback'
            refresh_token_expiration_minutes: 60
            token_endpoint_auth_method: 0
          connector_id: 108419
          created_at: '2019-05-19T23:56:57Z'
          description: ''
          icon_url: /images/missing_connector_icon/square/old_original.png
          id: 928549
          name: Sample OpenId Connect App
          notes: null
          policy_id: 165278
          provisioning:
            enabled: false
          tab_id: null
          updated_at: '2019-05-19T23:56:57Z'
          visible: true
        properties:
          configuration:
            $ref: '#/definitions/configuration_oidc'
        required:
          - connector_id
          - name
          - description
          - visible
          - policy_id
          - configuration
        type: object
  privilege:
    properties:
      description:
        example: Can administer users
        type: string
      id:
        example: 2c963197-bee2-4607-abc0-4786f1bfa55a
        type: string
      name:
        example: User Administrator
        type: string
      privilege:
        properties:
          Statement:
            items:
              properties:
                Action:
                  description: >-
                    An array of strings that represent actions within OneLogin.
                    Actions are prefixed with the class of object they are
                    related to and followed by a specific action for the given
                    class.

                    e.g. users:List, where the class is users and the specific
                    action is List. Don’t mix classes within an Action array. To
                    create a privilege that includes multiple different classes,
                    create multiple statements. A wildcard * that includes all
                    actions is supported. Use wildcards to create a Super User
                    privilege.
                  example:
                    - 'Users:Delete'
                    - 'Users:ResetPassword'
                    - 'Users:Unlock'
                    - 'Users:Get'
                  items:
                    enum:
                      - 'Apps:Create'
                      - 'Apps:Delete'
                      - 'Apps:List'
                      - 'Apps:Get'
                      - 'Apps:Update'
                      - 'Apps:ManageConnectors'
                      - 'Apps:ManageRoles'
                      - 'Apps:ManageTabs'
                      - 'Apps:ManageUsers'
                      - 'Apps:ReapplyMappings'
                      - 'Users:Create'
                      - 'Users:Delete'
                      - 'Users:List'
                      - 'Users:Get'
                      - 'Users:Update'
                      - 'Users:AssumeUser'
                      - 'Users:ManageApps'
                      - 'Users:Unlock'
                      - 'Users:GenerateTempMfaToken'
                      - 'Users:ResetPassword'
                      - 'Users:ReapplyMappings'
                      - 'Users:ManageLicense'
                      - 'Users:Invite'
                      - 'Users:ManageRoles'
                      - 'Roles:Create'
                      - 'Roles:Get'
                      - 'Roles:List'
                      - 'Roles:Update'
                      - 'Roles:Delete'
                      - 'Roles:ManageUsers'
                      - 'Roles:ManageApps'
                      - 'Reports:Create'
                      - 'Reports:Get'
                      - 'Reports:List'
                      - 'Reports:Update'
                      - 'Reports:Delete'
                      - 'Reports:Clone'
                      - 'Events:Get'
                      - 'Events:List'
                      - 'Groups:Create'
                      - 'Groups:Get'
                      - 'Groups:List'
                      - 'Groups:Update'
                      - 'Groups:Delete'
                      - 'Policies:Create'
                      - 'Policies:Get'
                      - 'Policies:List'
                      - 'Policies:Update'
                      - 'Policies:Delete'
                      - 'Policies:SetDefault'
                    type: string
                  type: array
                Effect:
                  description: >-
                    Set to “Allow.” By default, all actions are denied, this
                    Statement allows the listed actions to be executed.
                  example: Allow
                  type: string
                Scope:
                  description: >-
                    Target the privileged action against specific resources with
                    the scope.

                    The scope pattern is the class of object used by the Action,
                    followed by an ID that represents a resource in OneLogin.

                    e.g. apps/1234, where apps is the class and 1234 is the ID
                    of an app.

                    The wildcard * is supported and indicates that all resources
                    of the class type declared, in the Action, are in scope.

                    The Action and Scope classes must match. However, there is
                    an exception, a scope of roles/{role_id} can be combined
                    with Actions on the user or app class. The exception allows
                    you to target groups of users or apps with specific actions.
                  items:
                    example: '*'
                    type: string
                  type: array
              required:
                - Effect
                - Action
                - Scope
              type: object
            type: array
          Version:
            example: '2018-05-18'
            type: string
        type: object
    required:
      - name
      - privilege
    type: object
  risk_device:
    description: Information about the device being used.
    properties:
      id:
        description: This device's unique identifier
        type: string
    type: object
  risk_rule:
    properties:
      description:
        type: string
      filters:
        description: >-
          A list of IP addresses or country codes or names to evaluate against
          each event.
        items:
          type: string
        type: array
      id:
        type: string
      name:
        description: The name of this rule
        type: string
      source:
        $ref: '#/definitions/source'
      target:
        description: >-
          The target parameter that will be used when evaluating the rule
          against an incoming event.
        enum:
          - location.ip
          - location.address.country_iso_code
        type: string
      type:
        description: The type parameter specifies the type of rule that will be created.
        enum:
          - blacklist
          - whitelist
        type: string
    type: object
  risk_user:
    description: An Object containing User details.
    properties:
      authenticated:
        default: false
        description: >-
          Indicates if the metadata supplied in this event should be considered
          as trusted for the user.
        type: boolean
      id:
        description: A unique identifier for the user.
        type: string
      name:
        description: A name for the user.
        type: string
    required:
      - id
    type: object
  role:
    properties:
      admins:
        description: A list of user IDs to assign as role administrators.
        items:
          type: integer
        type: array
      apps:
        description: A list of app IDs that will be assigned to the role.
        example:
          - 234
          - 567
          - 777
        items:
          $ref: '#/definitions/id'
        type: array
      id:
        description: Role ID
        readOnly: true
        type: integer
      name:
        description: The name of the role.
        type: string
      users:
        description: A list of user IDs to assign to the role.
        items:
          type: integer
        type: array
    required:
      - name
    type: object
  rule_action:
    properties:
      name:
        description: Name of the Action
        example: Set Role
        type: string
      value:
        description: >-
          The unique identifier of the action. This should be used when defining
          actions for a User Mapping.
        example: add_role
        type: string
    type: object
  rule_condition:
    properties:
      name:
        description: Name of the operator
        example: Administrators
        type: string
      value:
        description: The condition operator value to use when creating or updating rules.
        example: '272445'
        type: string
    type: object
  saml_app:
    allOf:
      - $ref: '#/definitions/generic-app'
      - properties:
          parameters:
            properties:
              saml_username:
                properties:
                  user_attribute_mappings:
                    type: string
                required:
                  - user_attribute_mappings
                type: object
            required:
              - saml_username
            type: object
          configuration:
            $ref: '#/definitions/configuration_saml'
        required:
          - connector_id
          - name
          - description
          - visible
          - policy_id
          - configuration
          - parameters
        type: object
  saml_assert:
    example:
      app_id: '16819324'
      ip_address: 174.66.77.24
      password: P@ssw0rd
      subdomain: exampleOrganization
      username_or_email: hazel.zhang@onelogin.com
    properties:
      app_id:
        description: >-
          App ID of the app for which you want to generate a SAML token. This is
          the app ID in OneLogin.
        type: string
      ip_address:
        description: >-
          If you are using this API in a scenario in which MFA is required and
          you’ll need to be able to honor IP address whitelisting defined in MFA
          policies, provide this parameter and set its value to the whitelisted
          IP address that needs to be bypassed.
        type: string
      password:
        description: >-
          Password of the OneLogin user accessing the app for which you want to
          generate a SAML token.
        type: string
      subdomain:
        description: >-
          Set to the subdomain of the OneLogin user accessing the app for which
          you want to generate a SAML token.
        type: string
      username_or_email:
        description: >-
          Set this to the username or email of the OneLogin user accessing the
          app for which you want to generate a SAML token.
        type: string
    required:
      - username_or_email
      - password
      - app_id
      - subdomain
    type: object
  saml_factor:
    properties:
      app_id:
        description: >-
          App ID of the app for which you want to generate a SAML token. This is
          the app ID in OneLogin.
        example: '1657651'
        type: string
      device_id:
        description: >-
          Provide the MFA device_id you are submitting for verification. The
          device_id is supplied by the Generate SAML Assertion API.
        example: '1657651'
        type: string
      do_not_notify:
        description: >-
          When verifying MFA via Protect Push, set this to true to stop
          additional push notifications being sent to the OneLogin Protect
          device.
        example: false
        type: boolean
      otp_token:
        description: >-
          Provide the OTP value for the MFA factor you are submitting for
          verification. For some MFA factors; such as OneLogin OTP SMS, which
          requires the user to request an OTP; the otp_token value is not
          required, and if not included, returns a 200 OK - Pending result.
          You’ll make a subsequent Verify Factor API call to provide the
          otp_token value once it has been provided to the user.
        example: '999999'
        type: string
      state_token:
        description: >-
          Provide the state_token associated with the MFA device_id you are
          submitting for verification. The state_token is supplied by the
          Generate SAML Assertion API.
        example: 11x0x1x16x1x3259xxxx0x59xx6xxxx670x61x45xxxxx
        type: string
    required:
      - app_id
      - device_id
      - state_token
    type: object
  scope:
    properties:
      description:
        description: Description of the scope
        example: Read some contacts
        type: string
      id:
        description: Unique Scope ID value
        example: 25
        type: integer
      value:
        description: Scope Value
        example: 'read:contacts'
        type: string
    type: object
  session:
    description: >-
      A dictionary of extra information that provides useful context about the
      session, for example the session ID, or some cookie information.
    properties:
      id:
        description: >-
          If you use a database to track sessions, you can send us the session
          ID.
        type: string
    type: object
  source:
    description: >-
      Used for targeting custom rules based on a group of people, customers,
      accounts, or even a single user.
    properties:
      id:
        description: A unique id that represents the source of the event.
        type: string
      name:
        description: The name of the source
        type: string
    type: object
  sso_oidc:
    properties:
      client_id:
        description: >-
          OIDC: The OpenId Connect Client Id.  Note that client_secret is only
          returned after Creating an App
        example: 78d1d040-20c9-0136-5146-067351775fae92920
        type: string
    type: object
  sso_saml:
    properties:
      acs_url:
        example: 'https://sharkbytes.onelogin.com/trust/saml2/http-post/sso/928532'
        type: string
      certificate:
        description: The Certificate used for signing
        properties:
          id:
            description: SAML Certificate ID
            example: 170216
            type: integer
          name:
            description: SAML Certificate Name
            example: My Companies SAML Certificate
            type: string
          value:
            description: SAML Certificate Value
            example: c6d814d032f000d9c03bc79727265
            type: string
        type: object
      issuer:
        example: >-
          https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291
        type: string
      metadata_url:
        example: >-
          https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291
        type: string
      sls_url:
        example: 'https://sharkbytes.onelogin.com/trust/saml2/http-redirect/slo/928532'
        type: string
    type: object
  token_claim:
    properties:
      attribute_transformations:
        description: The type of transformation to perform on multi valued attributes.
        type: string
      default_values:
        description: Relates to Rules/Entitlements. Not supported yet.
        type: string
      id:
        description: The unique ID of the claim.
        example: 320780
        type: integer
      label:
        description: The UI label for the claims.
        example: email_address
        type: string
      provisioned_entitlements:
        description: Relates to Rules/Entitlements. Not supported yet.
        type: boolean
      skip_if_blank:
        description: not used
        type: boolean
      user_attribute_macros:
        description: >-
          When `user_attribute_mappings` is set to `_macro_` this macro will be
          used to assign the claims value.
        type: string
      user_attribute_mappings:
        description: A user attribute to map values from.
        example: email
        type: string
      values:
        description: Relates to Rules/Entitlements. Not supported yet.
        example: []
        items:
          type: string
        type: array
    type: object
  user:
    properties:
      activated_at:
        type: string
      comment:
        description: Free text related to the user.
        type: string
      company:
        description: The user's company.
        type: string
      created_at:
        type: string
      department:
        description: The user's department.
        type: string
      directory_id:
        description: The ID of the OneLogin Directory of the user.
        type: integer
      distinguished_name:
        description: The distinguished name of the user.
        type: string
      email:
        description: A valid email for the user.
        type: string
      external_id:
        description: The ID of the user in an external directory.
        type: string
      firstname:
        description: The user's first name.
        type: string
      group_id:
        description: The ID of the Group in OneLogin that the user is assigned to.
        type: integer
      id:
        type: integer
      invalid_login_attempts:
        type: integer
      invitation_sent_at:
        type: string
      last_login:
        type: string
      lastname:
        description: The user's last name.
        type: string
      locked_until:
        type: string
      manager_ad_id:
        description: The ID of the user's manager in Active Directory.
        type: string
      manager_user_id:
        description: The OneLogin User ID for the user's manager.
        type: string
      member_of:
        description: The user's directory membership.
        type: string
      password:
        description: The password to set for a user.
        type: string
      password_algorithm:
        description: >-
          Use this when importing a password that's already hashed. Prepend the
          salt value to the cleartext password value before SHA-256-encoding it
        type: string
      password_changed_at:
        type: string
      password_confirmation:
        description: Required if the password is being set.
        type: string
      phone:
        description: The E.164 format phone number for a user.
        type: string
      preferred_locale_code:
        type: string
      role_ids:
        description: A list of OneLogin Role IDs of the user
        items:
          type: integer
        minLength: 1
        type: array
      salt:
        description: The salt value used with the password_algorithm.
        type: string
      samaccountname:
        description: The user's Active Directory username.
        type: string
      state:
        enum:
          - 0
          - 1
          - 2
          - 3
        type: integer
      status:
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 7
          - 8
        type: integer
      title:
        description: The user's job title.
        type: string
      trusted_idp_id:
        description: The ID of the OneLogin Trusted IDP of the user.
        type: integer
      updated_at:
        type: string
      username:
        description: A username for the user.
        type: string
      userprincipalname:
        description: The principle name of the user.
        type: string
    type: object
  user_agent:
    description: The user agent of the User's request.
    type: string
  verb:
    description: >-
      Verbs are used to distinguish between different types of events. Where
      possible use one of the following verbs to describe the event. Alternately
      you can create custom verbs to describe other types of actions within your
      application.
    enum:
      - log-in
      - log-out
      - log-in-denied
      - authentication-challenge
      - authentication-challenge-pass
      - authentication-challenge-fail
    type: string
securityDefinitions:
  apikey_auth:
    type: "apiKey"
    in: "header"
    name: Authorization
    # name: "something" the name paramter will be ignored when using the 'x-terraform-authentication-scheme-bearer' extension, "Authorization" name will be use as default value
    x-terraform-authentication-scheme-bearer: true
          
tags:
  - description: OAuth2
    name: OAuth2
  - description: >-
      Collection of APIs that allow you to configure OneLogin as an
      Authorization server
    name: API Authorization Server
  - description: Access and Authorization Scopes
    name: 'API Auth: Scopes'
  - description: Regarding Token Claims
    name: 'API Auth: Claims'
  - name: 'API Auth: Client Apps'
  - description: App Management Endpoint
    name: Apps
  - description: Application Rule policy creation and enforcement
    name: App Rules
  - description: Events Endpoint
    name: Events
  - description: Group Management Endpoint
    name: Groups
  - description: Invite Via Email Link
    name: Invite Links
  - description: 'Multi Factor Authentication (MFA), One Time Passcodes (OTP)'
    name: Multi Factor Authentication
  - description: 'Deprecated Multi Factor Authentication (MFA), One Time Passcodes (OTP)'
    name: Multi Factor Authentication V1
  - description: Privilege Management Endpoint
    name: Privileges
  - description: Role Management Endpoint
    name: Roles
  - description: Dealing with SAML Authentication protocol
    name: SAML Assertions
  - description: User Management Endpoint Version 1
    name: Users V1
  - description: User Management Endpoint Version 2
    name: Users V2
  - description: User Mappings Management Endpoint
    name: User Mappings
  - description: Risk service Endpoint
    name: Vigilance AI
x-components:
  parameters:
    after:
      description: >-
        Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum
        date is 90 days ago.
      in: query
      name: after
      type: string
    api_auth_id:
      in: path
      name: api_auth_id
      required: true
      type: string
    app_id:
      in: path
      name: app_id
      required: true
      type: integer
    app_id_query:
      in: query
      name: app_id
      required: true
      type: integer
    app_name:
      description: Optional. Returns roles that contain this app name.
      in: query
      name: app_name
      type: string
    assigned:
      description: >-
        Optional. Defaults to true. Returns all apps not yet assigned to the
        role.
      in: query
      name: assigned
      type: boolean
    auth_method:
      in: query
      name: auth_method
      schema:
        $ref: '#/definitions/auth_method'
    before:
      description: >-
        Optional ISO8601 formatted date string. Defaults to current date.
        Maximum date is 90 days ago.
      in: query
      name: before
      type: string
    claim_id:
      in: path
      name: claim_id
      required: true
      type: integer
    client_app_id:
      in: path
      name: client_app_id
      required: true
      type: integer
    client_id:
      in: query
      name: client_id
      type: integer
    connector_id:
      description: >-
        Returns all apps based off a specific connector. See List Connectors for
        a complete list of Connector IDs.
      in: query
      name: connector_id
      schema:
        type: integer
    content-type:
      default: application/json
      in: header
      name: Content-Type
      type: string
      x-example: application/json
    created_at:
      in: query
      name: created_at
      type: string
    created_since:
      description: >-
        An ISO8601 timestamp value that returns all users created after a given
        date & time.
      in: query
      name: created_since
      type: string
    created_until:
      description: >-
        An ISO8601 timestamp value that returns all users created before a given
        date & time.
      in: query
      name: created_until
      type: string
    cursor:
      description: >-
        Set to the value extracted from Before-Cursor or After-Cursor headers to
        return the previous or next page.
      in: query
      name: cursor
      type: string
    custom_attributes:
      description: >-
        The short name of a custom attribute. Note that the attribute name is
        prefixed with custom_attributes.
      in: query
      name: 'custom_attributes.{attribute_name}'
      type: string
    device_id:
      in: path
      name: device_id
      required: true
      type: string
    directory_id:
      in: query
      name: directory_id
      type: integer
    email:
      description: The email address of the user
      in: query
      name: email
      type: string
    enabled:
      default: true
      description: Defaults to true. When set to `false` will return all disabled mappings.
      in: query
      name: enabled
      type: boolean
    event_id:
      in: path
      name: event_id
      required: true
      type: integer
    event_type_id:
      collectionFormat: multi
      in: query
      items:
        type: integer
      name: event_type_id
      type: array
    external_id:
      description: An external identifier that has been set on the user
      in: query
      name: external_id
      type: string
    fields:
      description: Optional. Comma delimited list of fields to return.
      enum:
        - apps
        - users
        - admins
      in: query
      name: fields
      type: string
    firstname:
      description: The first name of the user
      in: query
      name: firstname
      type: string
    group_id:
      in: path
      name: group_id
      required: true
      type: string
    has_action:
      description: >-
        Filters Rules based on their Actions. Values formatted as :, where name
        is the Action to look for, and value is the value to find. Multiple
        filters can be declared by using a comma delimited list. Wildcards are
        supported in both the name and value fields.

        For example:

        Single filter. has_action=set_licenses:123456

        Multiple filters. has_action=set_groups:123456,set_usertype:*

        Wildcard for actions. has_action=*:123456

        Wildcard for action values. has_action=set_userprincipalname:*
      in: query
      name: has_action
      type: string
      x-example: 'has_action=set_groups:123456,set_usertype:*'
    has_action_type:
      description: >-
        Filters Rules based on their action types.

        Allowed values are:

        builtin - actions that involve standard attributes custom - actions that
        involve custom attributes none - no actions are defined For example:

        Find Rules with no actions has_action_type=none
      enum:
        - builtin
        - custom
        - none
      in: query
      name: has_action_type
      type: string
    has_condition:
      description: >-
        Filters Rules based on their Conditions. Values formatted as :, where
        name is the Condition to look for, and value is the value to find.
        Multiple filters can be declared by using a comma delimited list.
        Wildcards are supported in both the name and value fields.

        For example:

        Single filter. has_condition=has_role:123456

        Multiple filters. has_condition=has_role:123456,status:1

        Wildcard for conditions. has_condition=*:123456

        Wildcard for condition values. has_condition=has_role:*
      in: query
      name: has_condition
      required: false
      type: string
      x-example: 'has_condition=has_role:123456'
    has_condition_type:
      description: >-
        Filters Rules based on their Conditions. Values formatted as :, where
        name is the Condition to look for, and value is the value to find.
        Multiple filters can be declared by using a comma delimited list.
        Wildcards are supported in both the name and value fields.

        For example:

        Single filter. has_condition=has_role:123456

        Multiple filters. has_condition=has_role:123456,status:1

        Wildcard for conditions. has_condition=*:123456

        Wildcard for condition values. has_condition=has_role:*
      enum:
        - builtin
        - custom
        - none
      in: query
      name: has_condition_type
      required: false
      type: string
    id_query:
      in: query
      name: id
      required: false
      type: integer
    ignore_visibility:
      default: false
      description: >-
        Defaults to `false`. When `true` will show all apps that are assigned to
        a user regardless of their portal visibility setting.
      in: query
      name: ignore_visibility
      type: boolean
    include_unassigned:
      description: >-
        Optional. Defaults to false. Include users that aren’t assigned to the
        role.
      in: query
      name: include_unassigned
      type: boolean
    kid:
      example: ZoKMCcDDtLHKYPyZnXSDKTMmknGltey7M09CQy3RCIE
      in: path
      name: kid
      required: true
      schema:
        description: >-
          The unique identifier for the key to fetch. You can get a list of keys
          and kids values via the List Signing Keys endpoint.
        type: string
    last_login_since:
      description: >-
        An ISO8601 timestamp value that returns all users that logged in after a
        given date & time.
      in: query
      name: last_login_since
      type: string
    last_login_until:
      description: >-
        An ISO8601 timestamp value that returns all users that logged in before
        a given date & time.
      in: query
      name: last_login_until
      type: string
    lastname:
      description: The last name of the user
      in: query
      name: lastname
      type: string
    limit:
      description: How many items to return at one time (max 100)
      format: int32
      in: query
      name: limit
      required: false
      type: integer
    locale:
      description: >-
        The 2 character language locale for the template. e.g. en = English, es
        = Spanish
      in: path
      name: locale
      pattern: '^[a-z]{2}$'
      required: true
      type: string
    locale_query:
      description: >-
        The 2 character language locale for the template. e.g. en = English, es
        = Spanish
      in: query
      name: locale
      pattern: '^[a-z]{2}$'
      type: string
    mapping_action_value:
      in: path
      name: mapping_action_value
      required: true
      type: string
    mapping_condition_value:
      in: path
      name: mapping_condition_value
      required: true
      type: string
    mapping_id:
      description: The id of the user mapping to locate.
      in: path
      name: mapping_id
      required: true
      type: integer
    mappings:
      description: >-
        Controls how mappings will be applied to the user on creation. Defaults
        to async.
      enum:
        - async
        - sync
        - disabled
      in: query
      name: mappings
      type: string
    name:
      in: query
      name: name
      type: string
    page:
      description: The page number of results to return.
      in: query
      name: page
      type: integer
    parameter_id:
      in: path
      name: parameter_id
      required: true
      type: string
    privilege_id:
      in: path
      name: privilege_id
      required: true
      type: string
    redirect_uri:
      example: 'https://app.example.com/auth'
      in: query
      name: redirect_uri
      schema:
        description: >-
          The redirect uri that is registered with OneLogin for this OpenId
          Connect app.
        type: string
    registration_id:
      description: The id of a registration
      in: path
      name: registration_id
      required: true
      type: string
      x-example: <UUID>
    resolution:
      in: query
      name: resolution
      type: string
    role_id:
      description: Set to the id of the role you want to return.
      in: path
      name: role_id
      required: true
      type: string
    role_name:
      description: Optional. Filters by role name.
      in: query
      name: role_name
      type: string
    rule_action_value:
      in: path
      name: rule_action_value
      required: true
      type: string
    rule_condition_value:
      in: path
      name: rule_condition_value
      required: true
      type: string
    rule_id:
      in: path
      name: rule_id
      required: true
      type: string
    samaccountname:
      description: The AD login name for the user
      in: query
      name: samaccountname
      type: string
    scope_id:
      in: path
      name: scope_id
      required: true
      type: integer
    since:
      in: query
      name: since
      type: string
    template_id:
      description: Unique identifier for the template to return.
      in: path
      name: template_id
      required: true
      type: integer
    template_type:
      description: The message template type to return.
      in: path
      name: template_type
      required: true
      type: string
    until:
      in: query
      name: until
      type: string
    updated_since:
      description: >-
        An ISO8601 timestamp value that returns all users updated after a given
        date & time.
      in: query
      name: updated_since
      type: string
    updated_until:
      description: >-
        An ISO8601 timestamp value that returns all users updated before a given
        date & time.
      in: query
      name: updated_until
      type: string
    user_id:
      description: Set to the id of the user that you want to return.
      in: path
      name: user_id
      required: true
      type: integer
    user_id_query:
      description: Set to the id of the user that you want to return.
      in: query
      name: user_id
      required: false
      type: integer
    user_ids:
      description: A comma separated list of OneLogin User IDs
      in: query
      name: user_ids
      type: string
    user_name:
      description: >-
        Allows you to filter on first name, last name, username, and email
        address.
      in: query
      name: name
      type: string
    username:
      description: The username for the user
      in: query
      name: username
      type: string
    validate_policy:
      description: Will passwords validate against the User Policy? Defaults to true.
      in: query
      name: validate_policy
      type: boolean
    verification_id:
      description: >-
        The verification_id is returned on activation of the factor or you can
        get the device_id using the Activate Factor API call.
      in: path
      name: verification_id
      required: true
      type: string
      x-example: <UUID>
  responses:
    '400':
      content:
        application/json:
          example:
            message: >-
              The request could not be understood by the server due to malformed
              syntax: Statement required Action array
            name: BadRequestError
            statusCode: 400
          schema:
            $ref: '#/definitions/altErr'
      description: Bad Request
    '401':
      content:
        application/json:
          example:
            message: This request requires Authentication
            name: UnauthorizedError
            statusCode: 401
          schema:
            $ref: '#/definitions/altErr'
      description: Unauthorized
    '403':
      content:
        application/json:
          example:
            message: Not allowed to destroy specified resource
            name: ForbiddenError
            statusCode: 403
          schema:
            $ref: '#/definitions/altErr'
      description: Forbidden
    '404':
      content:
        application/json:
          example:
            message: >-
              The resource can't be found or the server has not found anything
              matching the Request-URI
            name: NotFoundError
            statusCode: 404
          schema:
            $ref: '#/definitions/altErr'
      description: Not Found
    '422':
      content:
        application/json:
          example:
            message: invalid value in \"auth_method\"
            name: UnprocessableEntityError
            statusCode: 422
          schema:
            $ref: '#/definitions/altErr'
      description: Unprocessable Entity
    BadRequest:
      content:
        application/json:
          example:
            code: 400
            error: true
            message: Request Failure
            type: bad request
          schema:
            $ref: '#/definitions/Error'
      description: Bad Request
    Forbidden:
      content:
        application/json:
          example:
            code: 403
            error: true
            message: not allowed
            type: ForbiddenError
          schema:
            $ref: '#/definitions/Error'
      description: Forbidden
    NotFound:
      content:
        application/json:
          example:
            code: 404
            error: true
            message: No Route Exists
            type: Not Found
          schema:
            $ref: '#/definitions/Error'
      description: Not Found
    Unauthorized:
      content:
        application/json:
          example:
            code: 401
            error: true
            message: Unauthorized Error
            type: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      description: Unauthorized
    Unprocessable:
      content:
        application/json:
          example:
            code: 422
            error: true
            message: 'Validation failed: Value has already been taken'
            type: UnprocessableEntityError
          schema:
            $ref: '#/definitions/Error'
      description: Unprocessable
  headers:
    After-Cursor:
      description: >-
        A string that can be used to request the page of results that follows
        the current page using the same set of search filters and pagination
        options.
      schema:
        type: string
    Before-Cursor:
      description: >-
        A string that can be used to request the page of results that preceed
        the current page using the same set of search filters and pagination
        options.
      schema:
        type: string
    Current-Page:
      description: The index number of the current page being returned.
      schema:
        type: integer
    Link:
      description: 'A set of urls which contains premade links for first, next'
      schema:
        items:
          type: string
        type: array
    Page-Items:
      description: The number of items returned in the response.
      schema:
        type: integer
    Total-Count:
      description: The total number of items across all pages.
      schema:
        type: integer
    Total-Pages:
      description: The total number of pages to return all results.
      schema:
        type: integer